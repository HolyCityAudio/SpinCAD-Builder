/*
* generated by Xtext
*/
grammar InternalSpinCADMenu;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.holycityaudio.spincadmenu.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.holycityaudio.spincadmenu.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.holycityaudio.spincadmenu.services.SpinCADMenuGrammarAccess;

}

@parser::members {

 	private SpinCADMenuGrammarAccess grammarAccess;
 	
    public InternalSpinCADMenuParser(TokenStream input, SpinCADMenuGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Menu";	
   	}
   	
   	@Override
   	protected SpinCADMenuGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMenu
entryRuleMenu returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMenuRule()); }
	 iv_ruleMenu=ruleMenu 
	 { $current=$iv_ruleMenu.current; } 
	 EOF 
;

// Rule Menu
ruleMenu returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getMenuAccess().getElementsElementParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMenuRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElementAccess().getMENU_HEADERParserRuleCall_0()); 
    }
    this_MENU_HEADER_0=ruleMENU_HEADER
    { 
        $current = $this_MENU_HEADER_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getMENU_ITEMParserRuleCall_1()); 
    }
    this_MENU_ITEM_1=ruleMENU_ITEM
    { 
        $current = $this_MENU_ITEM_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMENU_HEADER
entryRuleMENU_HEADER returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMENU_HEADERRule()); }
	 iv_ruleMENU_HEADER=ruleMENU_HEADER 
	 { $current=$iv_ruleMENU_HEADER.current; } 
	 EOF 
;

// Rule MENU_HEADER
ruleMENU_HEADER returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@menu' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMENU_HEADERAccess().getMenuKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMENU_HEADERAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMENU_HEADERRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleMENU_ITEM
entryRuleMENU_ITEM returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMENU_ITEMRule()); }
	 iv_ruleMENU_ITEM=ruleMENU_ITEM 
	 { $current=$iv_ruleMENU_ITEM.current; } 
	 EOF 
;

// Rule MENU_ITEM
ruleMENU_ITEM returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@menuitem' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMENU_ITEMAccess().getMenuitemKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMENU_ITEMAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMENU_ITEMRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)(
(
		lv_className_2_0=RULE_ID
		{
			newLeafNode(lv_className_2_0, grammarAccess.getMENU_ITEMAccess().getClassNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMENU_ITEMRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"className",
        		lv_className_2_0, 
        		"ID");
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


