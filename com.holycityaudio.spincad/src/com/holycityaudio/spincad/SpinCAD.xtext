/* SpinCAD Builder - DSP Development Tool for the Spin FV-1 
 * SpinCAD.xtext
 * This file is the main Xtext grammar (parser) code for the SpinCAD Builder language.
 * 
 * Copyright (C)2015 - Gary Worsham 
 * 
 *   This program is free software: you can redistribute it and/or modify 
 *   it under the terms of the GNU General Public License as published by 
 *   the Free Software Foundation, either version 3 of the License, or 
 *   (at your option) any later version. 
 * 
 *   This program is distributed in the hope that it will be useful, 
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of 
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *   GNU General Public License for more details. 
 * 
 *   You should have received a copy of the GNU General Public License 
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>. 
 *     
 */ 

grammar com.holycityaudio.spincad.SpinCAD with org.eclipse.xtext.common.Terminals

generate spinCAD "http://www.holycityaudio.com/spincad/SpinCAD"

Program:
	'@name' name = ID
	(pins += Pin)+ 
	(elements += SpinElement)+
	;

// ---------- Pins ------------------
Pin:
	InputPin | OutputPin
;

InputPin:
	AudioInput | ControlInput	
;

OutputPin:
	AudioOutput | ControlOutput	
;

AudioInput:
	'@audioInput' varName = ID name = ID
;

AudioOutput:
	'@audioOutput' varName = ID name = ID
;

ControlInput:
	'@controlInput' varName = ID name = ID
;

ControlOutput:
	'@controlOutput' varName = ID name = ID
;

// --------------- Spin ASM Elements	
SpinElement:
	SpinInt | Control | SpinEquate | SpinBool | Mem | Instruction | Label | Comment | Macro | Offset;

// this now includes info to help set up control panels
SpinEquate:
	'equ' ename = ID value = SPINDOUBLE;

// sometimes you need an integer
SpinInt:
	'int' ename = ID value = INT;

Mem:
	'mem' buffer = ID length = SPINREGISTER
;

Offset:
	'offset' name = ID length = INT 
;

// SpinCAD logical variable, usually associated with a Checkbox
SpinBool:
	'bool' name = ID value = BOOLEAN
;

//---------------------------------------------
// -- Control Panel objects 
Control: SpinSliderLabel | SpinCheckBox | LogFreqSliderLabel | SpinRadioButton | SliderLabelCheckBox | SpinComboBox | SliderLabelSpinner;

SpinSliderLabel:
	'@sliderLabel' ename = ID controlName = ID (minVal = SPINDOUBLE maxVal = SPINDOUBLE initVal = SPINDOUBLE multiplier = SPINDOUBLE precision = INT (option = ID)?)?
;

SliderLabelSpinner:
	'@sliderLabelSpinner' ename = ID controlName = ID (minVal = SPINDOUBLE maxVal = SPINDOUBLE initVal = SPINDOUBLE multiplier = SPINDOUBLE precision = INT (option = ID)?)?
;

SliderLabelCheckBox: 
	'@sliderLabelCheckBox' ename = ID controlName = ID (minVal = SPINDOUBLE maxVal = SPINDOUBLE initVal = SPINDOUBLE multiplier = SPINDOUBLE precision = INT (option = ID)?)?
;

// ename is the name of the controlled variable, controlName is the text to display, value is the init value
SpinCheckBox:
	'@checkbox' ename = ID controlName = ID
;

LogFreqSliderLabel:
	'@logFreqSliderLabel' ename = ID controlName = ID (minVal = SPINDOUBLE maxVal = SPINDOUBLE initVal = SPINDOUBLE multiplier = SPINDOUBLE precision = INT (option = ID)?)?
;

SpinRadioButton:
	'@spinRadioButton' ename = ID controlName = ID
;

SpinComboBox:
	'@comboBox' ename = ID optiona = STRING optionb = STRING (optionc = STRING (optiond = STRING)?)?
;

//------------------------------------------------------------
// place a comment in the code
Comment:
	remark = SC_COMMENT;

Label:
	name = ID ':'
;

// - SpinCAD macro for conditional expressions within generateCode()
// also for special function calls etc.
Macro:
	IsPinConnected | IsTrue | IsElse | IsEndif | IsGreaterThan | IsEqualTo |
	IsLessThan | GetInputDefault | ReadChorusTap | SetChorusWidth |
	GetDelayScaleControl | SetOutputPin | GetBaseAddress | GetSamplesFromRatio |
	MinusDouble | DivideDouble | DivideInt | MultiplyDouble | SemitonesToRmpRate |
	Equals
;

IsPinConnected returns IsPinConnected: '@isPinConnected' arg1 = ID;
IsGreaterThan returns IsGreaterThan: '@isGreaterThan' variable = ID value = INT;
IsLessThan returns IsLessThan: '@isLessThan' variable = ID value = INT;
IsEqualTo returns IsEqualTo: '@isEqualTo' variable = ID value = INT;
IsTrue returns IsTrue: '@isTrue' variable = ID;
IsElse: {IsElse} '@else';
IsEndif: {IsEndif} "@endif";
GetInputDefault: '@getInputDefault' name = ID variable = ID scale = SPINDOUBLE defaultVal = SPINDOUBLE;
GetDelayScaleControl: '@getDelayScaleControl' ratio = ID length = ID offset = ID (control = ID)?;
ReadChorusTap: '@readChorusTap' LFO = INT SINCOS = INT ratio = ID length = ID offset = ID;
GetSamplesFromRatio: '@getSamplesFromRatio' variable = ID ratio = SPINDOUBLE length = SPINDOUBLE;
SemitonesToRmpRate: '@semitonesToRmpRate' variable = ID semitones = SPINDOUBLE;
GetBaseAddress: {GetBaseAddress} '@getBaseAddress';
SetOutputPin: '@setOutputPin' pinName = ID varName = ID;
MinusDouble: '@minusDouble' varName = ID high = ID low = ID;
DivideDouble: '@divideDouble' varName = ID high = ID low = ID;
Equals: '@equals' varName = ID value = SPINDOUBLE;
DivideInt: '@divideInt' varName = ID high = ID low = INT;
MultiplyDouble: '@multiplyDouble' varName = ID high = ID low = ID;

SetChorusWidth: '@setChorusWidth' varName = ID length = ID scale = ID;

//------------------------ regular Spin ASM instructions
Instruction:
	Inst_B15_S1_9 |
	Inst_B6_S1_14 |
	Inst_S1_14_S1_10 |
	Inst_B6 |
	Inst_B24  |
	Skip |
	Jam |
	Inst_X0 |
	LoadSinLFO |
	LoadRampLFO |
	ChorusReadDelay |
	ChorusReadValue |
	ChorusScaleOffset | 
	Log | 
	ReadDelayPointer
	;

Inst_B6_S1_14:
	ReadRegister |
	WriteRegister |
	ReadRegisterFilter |
	Maxx |
	WriteRegisterHighshelf |
	WriteRegisterLowshelf
;

Inst_B15_S1_9:
	ReadDelay |
	WriteDelay |
	WriteAllpass
;

Inst_B6:
	Mulx |
	Ldax
;

Inst_B24:
	And |
	Or |
	Xor
;

Inst_X0:  Clr | Not | Absa
;

Inst_S1_14_S1_10:
	Exp | ScaleOffset
;


ReadRegister: 'rdax' arg1 = SPINREGISTER ',' arg2 = SPINDOUBLE;
WriteRegisterLowshelf: 'wrlx' arg1 = SPINREGISTER ',' arg2 = SPINDOUBLE;
WriteRegisterHighshelf: 'wrhx' arg1 = SPINREGISTER ',' arg2 = SPINDOUBLE ;
WriteRegister: 'wrax' arg1 = SPINREGISTER ',' arg2 = SPINDOUBLE;
Maxx: 'maxx' arg1 = SPINREGISTER ',' arg2 = SPINDOUBLE;
ReadRegisterFilter: 'rdfx' arg1 = SPINREGISTER ',' arg2 = SPINDOUBLE;
Mulx: 'mulx' arg1 = ID;
Ldax: 'ldax' arg1 = ID;
Exp: 'exp' arg1 = SPINDOUBLE ',' arg2 = SPINDOUBLE ;
Log: 'log' arg1 = SPINDOUBLE ',' arg2 = SPINDOUBLE ;
ScaleOffset: 'sof' arg1 = SPINDOUBLE ',' arg2 = SPINDOUBLE ;
WriteDelay: 'wra' arg1 = SPINMEM ',' arg2 = SPINDOUBLE;
WriteAllpass: 'wrap' arg1 = SPINMEM ',' arg2 = SPINDOUBLE;
ReadDelay: 'rda' arg1 = SPINMEM ',' arg2 = SPINDOUBLE;
LoadSinLFO: 'wlds' arg1 = SPINREGISTER ',' arg2 = SPINDOUBLE',' arg3 = INT;
LoadRampLFO: 'wldr' arg1 = SPINREGISTER ',' arg2 = SPINREGISTER ',' arg3 = SPINREGISTER;

// Chorus instructions
ChorusReadDelay: 'cho rda' ',' arg1 = SPINREGISTER ',' arg2 = SPINCHOREGFLAGS ',' arg3 = SPINMEM;
ChorusReadValue: 'cho rdal' ',' arg1 = SPINREGISTER;
ChorusScaleOffset: 'cho sof' ','  arg1 = ID ',' arg2 = SPINCHOREGFLAGS ',' arg3 = SPINDOUBLE;
ReadDelayPointer: 'rmpa' arg1 = SPINDOUBLE;

// single argument instructions
And: 'and' arg1 = BINARY24;
Or: 'or' arg1 = BINARY24;
Xor: 'xor' arg1 = BINARY24;
Jam: 'jam' arg1=ID;

// zero argument instructions
Clr returns Clr:  {Clr} "clr" ;
Not returns Not: {Not} 'not';
Absa returns Absa: {Absa} 'absa';

//Then there's Skip
Skip: 'skp' flags = ID ('|' ID)* ',' label = [Label];

//----------  semi-colon comment terminal rule  --------------
terminal SC_COMMENT: ';' !('\n'|'\r')* ('\r'? '\n');

// --------------- data type rules -----------------------------

SPINDOUBLE: 
	'-'? (ID | (INT ( '.' INT)?))
;
 
SPINREGISTER: 
	('-')?(ID | INT )
;

SPINCHOREGFLAGS: 
	(INT | (ID ('|' ID)*)?)
;

SPINMEM: 
	buffer = SPINBUF (value = INT ('*' scale = ID)? | offset=[Offset])?
;

SPINBUF: ID('#'|'^')?('+'|'-')?
;

BINARY24: 
	((('%' INT) (ID) * ) | ('$' (INT)* (ID)*))
;

BOOLEAN: "true" | "false"
;
	
terminal fragment ESCAPED_CHAR : '\\' ('n'|'t'|'r'|'\\');
terminal STRING  : 
      '"' ( ESCAPED_CHAR | !('\\'|'"') )* '"' |
      "'" ( ESCAPED_CHAR | !('\\'|"'") )* "'"
;