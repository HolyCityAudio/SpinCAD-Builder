/*
* generated by Xtext
*/
grammar InternalSpinCADMenu;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.holycityaudio.spincadmenu.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.holycityaudio.spincadmenu.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.holycityaudio.spincadmenu.services.SpinCADMenuGrammarAccess;

}

@parser::members {
 
 	private SpinCADMenuGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SpinCADMenuGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleMenu
entryRuleMenu 
:
{ before(grammarAccess.getMenuRule()); }
	 ruleMenu
{ after(grammarAccess.getMenuRule()); } 
	 EOF 
;

// Rule Menu
ruleMenu
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMenuAccess().getElementsAssignment()); }
(rule__Menu__ElementsAssignment)*
{ after(grammarAccess.getMenuAccess().getElementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElement
entryRuleElement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementAccess().getAlternatives()); }
(rule__Element__Alternatives)
{ after(grammarAccess.getElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMENU_HEADER
entryRuleMENU_HEADER 
:
{ before(grammarAccess.getMENU_HEADERRule()); }
	 ruleMENU_HEADER
{ after(grammarAccess.getMENU_HEADERRule()); } 
	 EOF 
;

// Rule MENU_HEADER
ruleMENU_HEADER
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMENU_HEADERAccess().getGroup()); }
(rule__MENU_HEADER__Group__0)
{ after(grammarAccess.getMENU_HEADERAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMENU_ITEM
entryRuleMENU_ITEM 
:
{ before(grammarAccess.getMENU_ITEMRule()); }
	 ruleMENU_ITEM
{ after(grammarAccess.getMENU_ITEMRule()); } 
	 EOF 
;

// Rule MENU_ITEM
ruleMENU_ITEM
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMENU_ITEMAccess().getGroup()); }
(rule__MENU_ITEM__Group__0)
{ after(grammarAccess.getMENU_ITEMAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTEST_ITEM
entryRuleTEST_ITEM 
:
{ before(grammarAccess.getTEST_ITEMRule()); }
	 ruleTEST_ITEM
{ after(grammarAccess.getTEST_ITEMRule()); } 
	 EOF 
;

// Rule TEST_ITEM
ruleTEST_ITEM
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTEST_ITEMAccess().getGroup()); }
(rule__TEST_ITEM__Group__0)
{ after(grammarAccess.getTEST_ITEMAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Element__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getMENU_HEADERParserRuleCall_0()); }
	ruleMENU_HEADER
{ after(grammarAccess.getElementAccess().getMENU_HEADERParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getElementAccess().getMENU_ITEMParserRuleCall_1()); }
	ruleMENU_ITEM
{ after(grammarAccess.getElementAccess().getMENU_ITEMParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getElementAccess().getTEST_ITEMParserRuleCall_2()); }
	ruleTEST_ITEM
{ after(grammarAccess.getElementAccess().getTEST_ITEMParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__MENU_HEADER__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MENU_HEADER__Group__0__Impl
	rule__MENU_HEADER__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MENU_HEADER__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMENU_HEADERAccess().getMenuKeyword_0()); }

	'@menu' 

{ after(grammarAccess.getMENU_HEADERAccess().getMenuKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MENU_HEADER__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MENU_HEADER__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MENU_HEADER__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMENU_HEADERAccess().getNameAssignment_1()); }
(rule__MENU_HEADER__NameAssignment_1)
{ after(grammarAccess.getMENU_HEADERAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MENU_ITEM__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MENU_ITEM__Group__0__Impl
	rule__MENU_ITEM__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MENU_ITEM__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMENU_ITEMAccess().getMenuitemKeyword_0()); }

	'@menuitem' 

{ after(grammarAccess.getMENU_ITEMAccess().getMenuitemKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MENU_ITEM__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MENU_ITEM__Group__1__Impl
	rule__MENU_ITEM__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MENU_ITEM__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMENU_ITEMAccess().getNameAssignment_1()); }
(rule__MENU_ITEM__NameAssignment_1)
{ after(grammarAccess.getMENU_ITEMAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MENU_ITEM__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MENU_ITEM__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MENU_ITEM__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMENU_ITEMAccess().getClassNameAssignment_2()); }
(rule__MENU_ITEM__ClassNameAssignment_2)
{ after(grammarAccess.getMENU_ITEMAccess().getClassNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TEST_ITEM__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TEST_ITEM__Group__0__Impl
	rule__TEST_ITEM__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TEST_ITEM__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTEST_ITEMAccess().getTestItemKeyword_0()); }

	'@testItem' 

{ after(grammarAccess.getTEST_ITEMAccess().getTestItemKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TEST_ITEM__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TEST_ITEM__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TEST_ITEM__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTEST_ITEMAccess().getClassNameAssignment_1()); }
(rule__TEST_ITEM__ClassNameAssignment_1)
{ after(grammarAccess.getTEST_ITEMAccess().getClassNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Menu__ElementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMenuAccess().getElementsElementParserRuleCall_0()); }
	ruleElement{ after(grammarAccess.getMenuAccess().getElementsElementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MENU_HEADER__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMENU_HEADERAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getMENU_HEADERAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MENU_ITEM__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMENU_ITEMAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getMENU_ITEMAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MENU_ITEM__ClassNameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMENU_ITEMAccess().getClassNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getMENU_ITEMAccess().getClassNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TEST_ITEM__ClassNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTEST_ITEMAccess().getClassNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTEST_ITEMAccess().getClassNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


