/*
* generated by Xtext
*/
package com.holycityaudio.spincadmenu.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SpinCADMenuGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MenuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Menu");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Menu:
		//	elements+=Element*;
		public ParserRule getRule() { return rule; }

		//elements+=Element*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMENU_HEADERParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMENU_ITEMParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTEST_ITEMParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Element:
		//	MENU_HEADER | MENU_ITEM | TEST_ITEM;
		public ParserRule getRule() { return rule; }

		//MENU_HEADER | MENU_ITEM | TEST_ITEM
		public Alternatives getAlternatives() { return cAlternatives; }

		//MENU_HEADER
		public RuleCall getMENU_HEADERParserRuleCall_0() { return cMENU_HEADERParserRuleCall_0; }

		//MENU_ITEM
		public RuleCall getMENU_ITEMParserRuleCall_1() { return cMENU_ITEMParserRuleCall_1; }

		//TEST_ITEM
		public RuleCall getTEST_ITEMParserRuleCall_2() { return cTEST_ITEMParserRuleCall_2; }
	}

	public class MENU_HEADERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MENU_HEADER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMenuKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//MENU_HEADER:
		//	"@menu" name=STRING;
		public ParserRule getRule() { return rule; }

		//"@menu" name=STRING
		public Group getGroup() { return cGroup; }

		//"@menu"
		public Keyword getMenuKeyword_0() { return cMenuKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}

	public class MENU_ITEMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MENU_ITEM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMenuitemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameIDTerminalRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		
		//MENU_ITEM:
		//	"@menuitem" name=STRING className=ID;
		public ParserRule getRule() { return rule; }

		//"@menuitem" name=STRING className=ID
		public Group getGroup() { return cGroup; }

		//"@menuitem"
		public Keyword getMenuitemKeyword_0() { return cMenuitemKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//className=ID
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//ID
		public RuleCall getClassNameIDTerminalRuleCall_2_0() { return cClassNameIDTerminalRuleCall_2_0; }
	}

	public class TEST_ITEMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TEST_ITEM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestItemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassNameIDTerminalRuleCall_1_0 = (RuleCall)cClassNameAssignment_1.eContents().get(0);
		
		//TEST_ITEM:
		//	"@testItem" className=ID;
		public ParserRule getRule() { return rule; }

		//"@testItem" className=ID
		public Group getGroup() { return cGroup; }

		//"@testItem"
		public Keyword getTestItemKeyword_0() { return cTestItemKeyword_0; }

		//className=ID
		public Assignment getClassNameAssignment_1() { return cClassNameAssignment_1; }

		//ID
		public RuleCall getClassNameIDTerminalRuleCall_1_0() { return cClassNameIDTerminalRuleCall_1_0; }
	}
	
	
	private MenuElements pMenu;
	private ElementElements pElement;
	private MENU_HEADERElements pMENU_HEADER;
	private MENU_ITEMElements pMENU_ITEM;
	private TEST_ITEMElements pTEST_ITEM;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SpinCADMenuGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.holycityaudio.spincadmenu.SpinCADMenu".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Menu:
	//	elements+=Element*;
	public MenuElements getMenuAccess() {
		return (pMenu != null) ? pMenu : (pMenu = new MenuElements());
	}
	
	public ParserRule getMenuRule() {
		return getMenuAccess().getRule();
	}

	//Element:
	//	MENU_HEADER | MENU_ITEM | TEST_ITEM;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//MENU_HEADER:
	//	"@menu" name=STRING;
	public MENU_HEADERElements getMENU_HEADERAccess() {
		return (pMENU_HEADER != null) ? pMENU_HEADER : (pMENU_HEADER = new MENU_HEADERElements());
	}
	
	public ParserRule getMENU_HEADERRule() {
		return getMENU_HEADERAccess().getRule();
	}

	//MENU_ITEM:
	//	"@menuitem" name=STRING className=ID;
	public MENU_ITEMElements getMENU_ITEMAccess() {
		return (pMENU_ITEM != null) ? pMENU_ITEM : (pMENU_ITEM = new MENU_ITEMElements());
	}
	
	public ParserRule getMENU_ITEMRule() {
		return getMENU_ITEMAccess().getRule();
	}

	//TEST_ITEM:
	//	"@testItem" className=ID;
	public TEST_ITEMElements getTEST_ITEMAccess() {
		return (pTEST_ITEM != null) ? pTEST_ITEM : (pTEST_ITEM = new TEST_ITEMElements());
	}
	
	public ParserRule getTEST_ITEMRule() {
		return getTEST_ITEMAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
