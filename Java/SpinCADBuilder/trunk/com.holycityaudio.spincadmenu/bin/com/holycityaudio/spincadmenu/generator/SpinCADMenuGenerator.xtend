/*
 * generated by Xtext
 */
package com.holycityaudio.spincadmenu.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import com.holycityaudio.spincadmenu.spinCADMenu.Menu
import com.holycityaudio.spincadmenu.spinCADMenu.MENU_ITEM
import com.holycityaudio.spincadmenu.spinCADMenu.MENU_HEADER
import com.holycityaudio.spincadmenu.spinCADMenu.Element
import com.holycityaudio.spincadmenu.spinCADMenu.TEST_ITEM
import com.holycityaudio.spincad.generator.SpinCADTestGenerator

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class SpinCADMenuGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		// generate menu
		var pkage = "\\com\\holycityaudio\\SpinCAD\\"
		fsa.generateFile(pkage + resource.className+"Menu"+".java", toMenuCode(resource.contents.head as Menu))
		// TODO generate test cases for non-generated CAD Blocks
		}
		
		def className(Resource res) {
			var name = res.getURI.lastSegment
			println(name)
			return name.substring(0, name.indexOf('.'))
		}
	
	
	def toTestCases(Menu mn, Resource resource, IFileSystemAccess fsa) {
	'''
		«FOR Element m : mn.elements»
			«switch m {
				TEST_ITEM:{genTestItem(m, resource, fsa)}
			}»
		«ENDFOR»
	'''		
	}
	
def genTestItem(TEST_ITEM m, Resource resource, IFileSystemAccess fsa) { 
		var pkage = "\\com\\holycityaudio\\SpinCAD\\test\\"
//		fsa.generateFile(pkage + m.className+"Test.java", new SpinCADTestGenerator.genTestHeader(m.className))
'''	
'''
}	

	def toTestCode(Menu mn) {
}

def toMenuCode(Menu mn) {
		var menuNameY = "testing"
		'''
			package com.holycityaudio.SpinCAD;
			import com.holycityaudio.SpinCAD.SpinCADBlock;
			«FOR Element m : mn.elements»
				«switch m {
					MENU_ITEM:{importMenuItem(m)}
				}»
			«ENDFOR»

			import java.awt.event.ActionEvent;
			import java.awt.event.ActionListener;
		
			import javax.swing.JMenu;
			import javax.swing.JMenuBar;
			import javax.swing.JMenuItem;
		
			public class «mn.eResource.className+"Menu"» {

		//	private static final long serialVersionUID = 1L;

			public «mn.eResource.className+"Menu"»(final SpinCADFrame f, final SpinCADPanel panel, JMenuBar menuBar) {
		
			«FOR Element m : mn.elements»
				«switch m {
					MENU_HEADER:{menuNameY = getMenuName(m.name); genMenu(m)}
					MENU_ITEM:{genMenuItem(m, menuNameY)}
				}»
			«ENDFOR»
			}
		}
		'''
		}

	def String genMenu(MENU_HEADER m) {
		var menuNameX = getMenuName(m.name)
		'''
		JMenu «menuNameX» = new JMenu("«m.name»");
		menuBar.add(«menuNameX»);
		
	''' 
		}
				
	def genMenuItem(MENU_ITEM m, String menuName) '''	
		final JMenuItem mntm_«m.className» = new JMenuItem("«m.name»");
		mntm_«m.className».addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				SpinCADBlock pcB = new «m.className»CADBlock(50, 100);
				f.dropBlock(panel, pcB);
			}
		});
		«menuName».add(mntm_«m.className»);
			
'''

	def importMenuItem(MENU_ITEM m) '''		
		import com.holycityaudio.SpinCAD.CADBlocks.«m.className»CADBlock;
'''

	def getMenuName(String header) {
		var menuName = header.replaceAll("\\s+","")
		menuName = menuName.replaceAll("\\/","") 
		menuName = menuName.replaceAll("-","_") 
		"mn_" + menuName.toLowerCase()
	}
}