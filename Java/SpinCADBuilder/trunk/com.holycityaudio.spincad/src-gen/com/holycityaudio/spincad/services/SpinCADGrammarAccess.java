/*
* generated by Xtext
*/
package com.holycityaudio.spincad.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SpinCADGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPinsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPinsPinParserRuleCall_2_0 = (RuleCall)cPinsAssignment_2.eContents().get(0);
		private final Assignment cControlsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cControlsControlParserRuleCall_3_0 = (RuleCall)cControlsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsSpinElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		
		//Program:
		//	"@name" name=ID pins+=Pin+ controls+=Control* elements+=SpinElement+;
		public ParserRule getRule() { return rule; }

		//"@name" name=ID pins+=Pin+ controls+=Control* elements+=SpinElement+
		public Group getGroup() { return cGroup; }

		//"@name"
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//pins+=Pin+
		public Assignment getPinsAssignment_2() { return cPinsAssignment_2; }

		//Pin
		public RuleCall getPinsPinParserRuleCall_2_0() { return cPinsPinParserRuleCall_2_0; }

		//controls+=Control*
		public Assignment getControlsAssignment_3() { return cControlsAssignment_3; }

		//Control
		public RuleCall getControlsControlParserRuleCall_3_0() { return cControlsControlParserRuleCall_3_0; }

		//elements+=SpinElement+
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//SpinElement
		public RuleCall getElementsSpinElementParserRuleCall_4_0() { return cElementsSpinElementParserRuleCall_4_0; }
	}

	public class PinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pin");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputPinParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutputPinParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ---------- Pins ------------------
		//Pin:
		//	InputPin | OutputPin;
		public ParserRule getRule() { return rule; }

		//InputPin | OutputPin
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputPin
		public RuleCall getInputPinParserRuleCall_0() { return cInputPinParserRuleCall_0; }

		//OutputPin
		public RuleCall getOutputPinParserRuleCall_1() { return cOutputPinParserRuleCall_1; }
	}

	public class InputPinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputPin");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAudioInputParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cControlInputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InputPin:
		//	AudioInput | ControlInput;
		public ParserRule getRule() { return rule; }

		//AudioInput | ControlInput
		public Alternatives getAlternatives() { return cAlternatives; }

		//AudioInput
		public RuleCall getAudioInputParserRuleCall_0() { return cAudioInputParserRuleCall_0; }

		//ControlInput
		public RuleCall getControlInputParserRuleCall_1() { return cControlInputParserRuleCall_1; }
	}

	public class OutputPinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputPin");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAudioOutputParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cControlOutputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OutputPin:
		//	AudioOutput | ControlOutput;
		public ParserRule getRule() { return rule; }

		//AudioOutput | ControlOutput
		public Alternatives getAlternatives() { return cAlternatives; }

		//AudioOutput
		public RuleCall getAudioOutputParserRuleCall_0() { return cAudioOutputParserRuleCall_0; }

		//ControlOutput
		public RuleCall getControlOutputParserRuleCall_1() { return cControlOutputParserRuleCall_1; }
	}

	public class AudioInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AudioInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAudioInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//AudioInput:
		//	"@audioInput" varName=ID name=ID;
		public ParserRule getRule() { return rule; }

		//"@audioInput" varName=ID name=ID
		public Group getGroup() { return cGroup; }

		//"@audioInput"
		public Keyword getAudioInputKeyword_0() { return cAudioInputKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class AudioOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AudioOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAudioOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//AudioOutput:
		//	"@audioOutput" varName=ID name=ID;
		public ParserRule getRule() { return rule; }

		//"@audioOutput" varName=ID name=ID
		public Group getGroup() { return cGroup; }

		//"@audioOutput"
		public Keyword getAudioOutputKeyword_0() { return cAudioOutputKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ControlInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControlInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ControlInput:
		//	"@controlInput" varName=ID name=ID;
		public ParserRule getRule() { return rule; }

		//"@controlInput" varName=ID name=ID
		public Group getGroup() { return cGroup; }

		//"@controlInput"
		public Keyword getControlInputKeyword_0() { return cControlInputKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ControlOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControlOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ControlOutput:
		//	"@controlOutput" varName=ID name=ID;
		public ParserRule getRule() { return rule; }

		//"@controlOutput" varName=ID name=ID
		public Group getGroup() { return cGroup; }

		//"@controlOutput"
		public Keyword getControlOutputKeyword_0() { return cControlOutputKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Control");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSliderParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheckBoxParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cControlLabelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// ---------- Controls (popup control panel for block settings) ------------------
		//Control:
		//	Slider | CheckBox | controlLabel;
		public ParserRule getRule() { return rule; }

		//Slider | CheckBox | controlLabel
		public Alternatives getAlternatives() { return cAlternatives; }

		//Slider
		public RuleCall getSliderParserRuleCall_0() { return cSliderParserRuleCall_0; }

		//CheckBox
		public RuleCall getCheckBoxParserRuleCall_1() { return cCheckBoxParserRuleCall_1; }

		//controlLabel
		public RuleCall getControlLabelParserRuleCall_2() { return cControlLabelParserRuleCall_2; }
	}

	public class SliderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Slider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSliderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelIDTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		
		//Slider:
		//	"@slider" varName=ID label=ID;
		public ParserRule getRule() { return rule; }

		//"@slider" varName=ID label=ID
		public Group getGroup() { return cGroup; }

		//"@slider"
		public Keyword getSliderKeyword_0() { return cSliderKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//label=ID
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_2_0() { return cLabelIDTerminalRuleCall_2_0; }
	}

	public class CheckBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckBox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckboxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelIDTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		
		//CheckBox:
		//	"@checkbox" varName=ID label=ID;
		public ParserRule getRule() { return rule; }

		//"@checkbox" varName=ID label=ID
		public Group getGroup() { return cGroup; }

		//"@checkbox"
		public Keyword getCheckboxKeyword_0() { return cCheckboxKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//label=ID
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_2_0() { return cLabelIDTerminalRuleCall_2_0; }
	}

	public class ControlLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "controlLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelIDTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		
		//controlLabel:
		//	"@controlLabel" varName=ID label=ID;
		public ParserRule getRule() { return rule; }

		//"@controlLabel" varName=ID label=ID
		public Group getGroup() { return cGroup; }

		//"@controlLabel"
		public Keyword getControlLabelKeyword_0() { return cControlLabelKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//label=ID
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_2_0() { return cLabelIDTerminalRuleCall_2_0; }
	}

	public class SpinElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpinElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEquateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMemParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInstructionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLabelParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCommentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMacroParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOffsetParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//// --------------- Spin ASM Elements	
		//SpinElement:
		//	Equate | Mem | Instruction | Label | Comment | Macro | Offset;
		public ParserRule getRule() { return rule; }

		//Equate | Mem | Instruction | Label | Comment | Macro | Offset
		public Alternatives getAlternatives() { return cAlternatives; }

		//Equate
		public RuleCall getEquateParserRuleCall_0() { return cEquateParserRuleCall_0; }

		//Mem
		public RuleCall getMemParserRuleCall_1() { return cMemParserRuleCall_1; }

		//Instruction
		public RuleCall getInstructionParserRuleCall_2() { return cInstructionParserRuleCall_2; }

		//Label
		public RuleCall getLabelParserRuleCall_3() { return cLabelParserRuleCall_3; }

		//Comment
		public RuleCall getCommentParserRuleCall_4() { return cCommentParserRuleCall_4; }

		//Macro
		public RuleCall getMacroParserRuleCall_5() { return cMacroParserRuleCall_5; }

		//Offset
		public RuleCall getOffsetParserRuleCall_6() { return cOffsetParserRuleCall_6; }
	}

	public class EquateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEquKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnameIDTerminalRuleCall_1_0 = (RuleCall)cEnameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSPINDOUBLEParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Equate:
		//	"equ" ename=ID value=SPINDOUBLE;
		public ParserRule getRule() { return rule; }

		//"equ" ename=ID value=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//"equ"
		public Keyword getEquKeyword_0() { return cEquKeyword_0; }

		//ename=ID
		public Assignment getEnameAssignment_1() { return cEnameAssignment_1; }

		//ID
		public RuleCall getEnameIDTerminalRuleCall_1_0() { return cEnameIDTerminalRuleCall_1_0; }

		//value=SPINDOUBLE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//SPINDOUBLE
		public RuleCall getValueSPINDOUBLEParserRuleCall_2_0() { return cValueSPINDOUBLEParserRuleCall_2_0; }
	}

	public class MemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBufferAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBufferIDTerminalRuleCall_1_0 = (RuleCall)cBufferAssignment_1.eContents().get(0);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthSPINREGISTERParserRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		
		//Mem:
		//	"mem" buffer=ID length=SPINREGISTER;
		public ParserRule getRule() { return rule; }

		//"mem" buffer=ID length=SPINREGISTER
		public Group getGroup() { return cGroup; }

		//"mem"
		public Keyword getMemKeyword_0() { return cMemKeyword_0; }

		//buffer=ID
		public Assignment getBufferAssignment_1() { return cBufferAssignment_1; }

		//ID
		public RuleCall getBufferIDTerminalRuleCall_1_0() { return cBufferIDTerminalRuleCall_1_0; }

		//length=SPINREGISTER
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }

		//SPINREGISTER
		public RuleCall getLengthSPINREGISTERParserRuleCall_2_0() { return cLengthSPINREGISTERParserRuleCall_2_0; }
	}

	public class OffsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Offset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOffsetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthINTTerminalRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		
		//Offset:
		//	"offset" name=ID length=INT;
		public ParserRule getRule() { return rule; }

		//"offset" name=ID length=INT
		public Group getGroup() { return cGroup; }

		//"offset"
		public Keyword getOffsetKeyword_0() { return cOffsetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//length=INT
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }

		//INT
		public RuleCall getLengthINTTerminalRuleCall_2_0() { return cLengthINTTerminalRuleCall_2_0; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment");
		private final Assignment cRemarkAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRemarkSC_COMMENTTerminalRuleCall_0 = (RuleCall)cRemarkAssignment.eContents().get(0);
		
		//Comment:
		//	remark=SC_COMMENT;
		public ParserRule getRule() { return rule; }

		//remark=SC_COMMENT
		public Assignment getRemarkAssignment() { return cRemarkAssignment; }

		//SC_COMMENT
		public RuleCall getRemarkSC_COMMENTTerminalRuleCall_0() { return cRemarkSC_COMMENTTerminalRuleCall_0; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Label:
		//	name=ID ":";
		public ParserRule getRule() { return rule; }

		//name=ID ":"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}

	public class MacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Macro");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIsPinConnectedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIsElseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIsEndifParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGetInputDefaultParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGetDelayScaleControlParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSetOutputPinParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cGetBaseAddressParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//// - SpinCAD macro for conditional expressions within generateCode()
		//// also for special function calls etc.
		//Macro:
		//	IsPinConnected | IsElse | IsEndif | GetInputDefault | GetDelayScaleControl | SetOutputPin | GetBaseAddress;
		public ParserRule getRule() { return rule; }

		//IsPinConnected | IsElse | IsEndif | GetInputDefault | GetDelayScaleControl | SetOutputPin | GetBaseAddress
		public Alternatives getAlternatives() { return cAlternatives; }

		//IsPinConnected
		public RuleCall getIsPinConnectedParserRuleCall_0() { return cIsPinConnectedParserRuleCall_0; }

		//IsElse
		public RuleCall getIsElseParserRuleCall_1() { return cIsElseParserRuleCall_1; }

		//IsEndif
		public RuleCall getIsEndifParserRuleCall_2() { return cIsEndifParserRuleCall_2; }

		//GetInputDefault
		public RuleCall getGetInputDefaultParserRuleCall_3() { return cGetInputDefaultParserRuleCall_3; }

		//GetDelayScaleControl
		public RuleCall getGetDelayScaleControlParserRuleCall_4() { return cGetDelayScaleControlParserRuleCall_4; }

		//SetOutputPin
		public RuleCall getSetOutputPinParserRuleCall_5() { return cSetOutputPinParserRuleCall_5; }

		//GetBaseAddress
		public RuleCall getGetBaseAddressParserRuleCall_6() { return cGetBaseAddressParserRuleCall_6; }
	}

	public class IsPinConnectedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsPinConnected");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsPinConnectedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1IDTerminalRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		
		//IsPinConnected:
		//	"@isPinConnected" arg1=ID;
		public ParserRule getRule() { return rule; }

		//"@isPinConnected" arg1=ID
		public Group getGroup() { return cGroup; }

		//"@isPinConnected"
		public Keyword getIsPinConnectedKeyword_0() { return cIsPinConnectedKeyword_0; }

		//arg1=ID
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//ID
		public RuleCall getArg1IDTerminalRuleCall_1_0() { return cArg1IDTerminalRuleCall_1_0; }
	}

	public class IsElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsElseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IsElse:
		//	{IsElse} "@else";
		public ParserRule getRule() { return rule; }

		//{IsElse} "@else"
		public Group getGroup() { return cGroup; }

		//{IsElse}
		public Action getIsElseAction_0() { return cIsElseAction_0; }

		//"@else"
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }
	}

	public class IsEndifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsEndif");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsEndifAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEndifKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IsEndif:
		//	{IsEndif} "@endif";
		public ParserRule getRule() { return rule; }

		//{IsEndif} "@endif"
		public Group getGroup() { return cGroup; }

		//{IsEndif}
		public Action getIsEndifAction_0() { return cIsEndifAction_0; }

		//"@endif"
		public Keyword getEndifKeyword_1() { return cEndifKeyword_1; }
	}

	public class GetInputDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetInputDefault");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetInputDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableIDTerminalRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Assignment cScaleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScaleSPINDOUBLEParserRuleCall_3_0 = (RuleCall)cScaleAssignment_3.eContents().get(0);
		private final Assignment cDefaultValAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefaultValSPINDOUBLEParserRuleCall_4_0 = (RuleCall)cDefaultValAssignment_4.eContents().get(0);
		
		//GetInputDefault:
		//	"@getInputDefault" name=ID variable=ID scale=SPINDOUBLE defaultVal=SPINDOUBLE;
		public ParserRule getRule() { return rule; }

		//"@getInputDefault" name=ID variable=ID scale=SPINDOUBLE defaultVal=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//"@getInputDefault"
		public Keyword getGetInputDefaultKeyword_0() { return cGetInputDefaultKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//variable=ID
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_2_0() { return cVariableIDTerminalRuleCall_2_0; }

		//scale=SPINDOUBLE
		public Assignment getScaleAssignment_3() { return cScaleAssignment_3; }

		//SPINDOUBLE
		public RuleCall getScaleSPINDOUBLEParserRuleCall_3_0() { return cScaleSPINDOUBLEParserRuleCall_3_0; }

		//defaultVal=SPINDOUBLE
		public Assignment getDefaultValAssignment_4() { return cDefaultValAssignment_4; }

		//SPINDOUBLE
		public RuleCall getDefaultValSPINDOUBLEParserRuleCall_4_0() { return cDefaultValSPINDOUBLEParserRuleCall_4_0; }
	}

	public class GetDelayScaleControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetDelayScaleControl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetDelayScaleControlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLengthIDTerminalRuleCall_1_0 = (RuleCall)cLengthAssignment_1.eContents().get(0);
		private final Assignment cBufferAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBufferIDTerminalRuleCall_2_0 = (RuleCall)cBufferAssignment_2.eContents().get(0);
		private final Assignment cControlAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cControlIDTerminalRuleCall_3_0 = (RuleCall)cControlAssignment_3.eContents().get(0);
		
		//GetDelayScaleControl:
		//	"@getDelayScaleControl" length=ID buffer=ID control=ID?;
		public ParserRule getRule() { return rule; }

		//"@getDelayScaleControl" length=ID buffer=ID control=ID?
		public Group getGroup() { return cGroup; }

		//"@getDelayScaleControl"
		public Keyword getGetDelayScaleControlKeyword_0() { return cGetDelayScaleControlKeyword_0; }

		//length=ID
		public Assignment getLengthAssignment_1() { return cLengthAssignment_1; }

		//ID
		public RuleCall getLengthIDTerminalRuleCall_1_0() { return cLengthIDTerminalRuleCall_1_0; }

		//buffer=ID
		public Assignment getBufferAssignment_2() { return cBufferAssignment_2; }

		//ID
		public RuleCall getBufferIDTerminalRuleCall_2_0() { return cBufferIDTerminalRuleCall_2_0; }

		//control=ID?
		public Assignment getControlAssignment_3() { return cControlAssignment_3; }

		//ID
		public RuleCall getControlIDTerminalRuleCall_3_0() { return cControlIDTerminalRuleCall_3_0; }
	}

	public class GetBaseAddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetBaseAddress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGetBaseAddressAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGetBaseAddressKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//GetBaseAddress:
		//	{GetBaseAddress} "@getBaseAddress";
		public ParserRule getRule() { return rule; }

		//{GetBaseAddress} "@getBaseAddress"
		public Group getGroup() { return cGroup; }

		//{GetBaseAddress}
		public Action getGetBaseAddressAction_0() { return cGetBaseAddressAction_0; }

		//"@getBaseAddress"
		public Keyword getGetBaseAddressKeyword_1() { return cGetBaseAddressKeyword_1; }
	}

	public class SetOutputPinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetOutputPin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetOutputPinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPinNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPinNameIDTerminalRuleCall_1_0 = (RuleCall)cPinNameAssignment_1.eContents().get(0);
		private final Assignment cVarNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarNameIDTerminalRuleCall_2_0 = (RuleCall)cVarNameAssignment_2.eContents().get(0);
		
		//SetOutputPin:
		//	"@setOutputPin" pinName=ID varName=ID;
		public ParserRule getRule() { return rule; }

		//"@setOutputPin" pinName=ID varName=ID
		public Group getGroup() { return cGroup; }

		//"@setOutputPin"
		public Keyword getSetOutputPinKeyword_0() { return cSetOutputPinKeyword_0; }

		//pinName=ID
		public Assignment getPinNameAssignment_1() { return cPinNameAssignment_1; }

		//ID
		public RuleCall getPinNameIDTerminalRuleCall_1_0() { return cPinNameIDTerminalRuleCall_1_0; }

		//varName=ID
		public Assignment getVarNameAssignment_2() { return cVarNameAssignment_2; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_2_0() { return cVarNameIDTerminalRuleCall_2_0; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInst_B15_S1_9ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInst_B6_S1_14ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInst_S1_14_S1_10ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInst_B6ParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInst_B24ParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSkipParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cJamParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInst_X0ParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cLoadSinLFOParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLoadRampLFOParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cChorusReadDelayParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cChorusReadValueParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cChorusScaleOffsetParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cLogParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cReadDelayPointerParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		////------------------------ regular Spin ASM instructions
		//Instruction:
		//	Inst_B15_S1_9 | Inst_B6_S1_14 | Inst_S1_14_S1_10 | Inst_B6 | Inst_B24 | Skip | Jam | Inst_X0 | LoadSinLFO |
		//	LoadRampLFO | ChorusReadDelay | ChorusReadValue | ChorusScaleOffset | Log | ReadDelayPointer;
		public ParserRule getRule() { return rule; }

		//Inst_B15_S1_9 | Inst_B6_S1_14 | Inst_S1_14_S1_10 | Inst_B6 | Inst_B24 | Skip | Jam | Inst_X0 | LoadSinLFO | LoadRampLFO
		//| ChorusReadDelay | ChorusReadValue | ChorusScaleOffset | Log | ReadDelayPointer
		public Alternatives getAlternatives() { return cAlternatives; }

		//Inst_B15_S1_9
		public RuleCall getInst_B15_S1_9ParserRuleCall_0() { return cInst_B15_S1_9ParserRuleCall_0; }

		//Inst_B6_S1_14
		public RuleCall getInst_B6_S1_14ParserRuleCall_1() { return cInst_B6_S1_14ParserRuleCall_1; }

		//Inst_S1_14_S1_10
		public RuleCall getInst_S1_14_S1_10ParserRuleCall_2() { return cInst_S1_14_S1_10ParserRuleCall_2; }

		//Inst_B6
		public RuleCall getInst_B6ParserRuleCall_3() { return cInst_B6ParserRuleCall_3; }

		//Inst_B24
		public RuleCall getInst_B24ParserRuleCall_4() { return cInst_B24ParserRuleCall_4; }

		//Skip
		public RuleCall getSkipParserRuleCall_5() { return cSkipParserRuleCall_5; }

		//Jam
		public RuleCall getJamParserRuleCall_6() { return cJamParserRuleCall_6; }

		//Inst_X0
		public RuleCall getInst_X0ParserRuleCall_7() { return cInst_X0ParserRuleCall_7; }

		//LoadSinLFO
		public RuleCall getLoadSinLFOParserRuleCall_8() { return cLoadSinLFOParserRuleCall_8; }

		//LoadRampLFO
		public RuleCall getLoadRampLFOParserRuleCall_9() { return cLoadRampLFOParserRuleCall_9; }

		//ChorusReadDelay
		public RuleCall getChorusReadDelayParserRuleCall_10() { return cChorusReadDelayParserRuleCall_10; }

		//ChorusReadValue
		public RuleCall getChorusReadValueParserRuleCall_11() { return cChorusReadValueParserRuleCall_11; }

		//ChorusScaleOffset
		public RuleCall getChorusScaleOffsetParserRuleCall_12() { return cChorusScaleOffsetParserRuleCall_12; }

		//Log
		public RuleCall getLogParserRuleCall_13() { return cLogParserRuleCall_13; }

		//ReadDelayPointer
		public RuleCall getReadDelayPointerParserRuleCall_14() { return cReadDelayPointerParserRuleCall_14; }
	}

	public class Inst_B6_S1_14Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inst_B6_S1_14");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReadRegisterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWriteRegisterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReadRegisterFilterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMaxxParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWriteRegisterHighshelfParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cWriteRegisterLowshelfParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Inst_B6_S1_14:
		//	ReadRegister | WriteRegister | ReadRegisterFilter | Maxx | WriteRegisterHighshelf | WriteRegisterLowshelf;
		public ParserRule getRule() { return rule; }

		//ReadRegister | WriteRegister | ReadRegisterFilter | Maxx | WriteRegisterHighshelf | WriteRegisterLowshelf
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReadRegister
		public RuleCall getReadRegisterParserRuleCall_0() { return cReadRegisterParserRuleCall_0; }

		//WriteRegister
		public RuleCall getWriteRegisterParserRuleCall_1() { return cWriteRegisterParserRuleCall_1; }

		//ReadRegisterFilter
		public RuleCall getReadRegisterFilterParserRuleCall_2() { return cReadRegisterFilterParserRuleCall_2; }

		//Maxx
		public RuleCall getMaxxParserRuleCall_3() { return cMaxxParserRuleCall_3; }

		//WriteRegisterHighshelf
		public RuleCall getWriteRegisterHighshelfParserRuleCall_4() { return cWriteRegisterHighshelfParserRuleCall_4; }

		//WriteRegisterLowshelf
		public RuleCall getWriteRegisterLowshelfParserRuleCall_5() { return cWriteRegisterLowshelfParserRuleCall_5; }
	}

	public class Inst_B15_S1_9Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inst_B15_S1_9");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReadDelayParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWriteDelayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWriteAllpassParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Inst_B15_S1_9:
		//	ReadDelay | WriteDelay | WriteAllpass;
		public ParserRule getRule() { return rule; }

		//ReadDelay | WriteDelay | WriteAllpass
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReadDelay
		public RuleCall getReadDelayParserRuleCall_0() { return cReadDelayParserRuleCall_0; }

		//WriteDelay
		public RuleCall getWriteDelayParserRuleCall_1() { return cWriteDelayParserRuleCall_1; }

		//WriteAllpass
		public RuleCall getWriteAllpassParserRuleCall_2() { return cWriteAllpassParserRuleCall_2; }
	}

	public class Inst_B6Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inst_B6");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMulxParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLdaxParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Inst_B6:
		//	Mulx | Ldax;
		public ParserRule getRule() { return rule; }

		//Mulx | Ldax
		public Alternatives getAlternatives() { return cAlternatives; }

		//Mulx
		public RuleCall getMulxParserRuleCall_0() { return cMulxParserRuleCall_0; }

		//Ldax
		public RuleCall getLdaxParserRuleCall_1() { return cLdaxParserRuleCall_1; }
	}

	public class Inst_B24Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inst_B24");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Inst_B24:
		//	And | Or | Xor;
		public ParserRule getRule() { return rule; }

		//And | Or | Xor
		public Alternatives getAlternatives() { return cAlternatives; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//Or
		public RuleCall getOrParserRuleCall_1() { return cOrParserRuleCall_1; }

		//Xor
		public RuleCall getXorParserRuleCall_2() { return cXorParserRuleCall_2; }
	}

	public class Inst_X0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inst_X0");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAbsaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Inst_X0:
		//	Clr | Not | Absa;
		public ParserRule getRule() { return rule; }

		//Clr | Not | Absa
		public Alternatives getAlternatives() { return cAlternatives; }

		//Clr
		public RuleCall getClrParserRuleCall_0() { return cClrParserRuleCall_0; }

		//Not
		public RuleCall getNotParserRuleCall_1() { return cNotParserRuleCall_1; }

		//Absa
		public RuleCall getAbsaParserRuleCall_2() { return cAbsaParserRuleCall_2; }
	}

	public class Inst_S1_14_S1_10Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inst_S1_14_S1_10");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScaleOffsetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Inst_S1_14_S1_10:
		//	Exp | ScaleOffset;
		public ParserRule getRule() { return rule; }

		//Exp | ScaleOffset
		public Alternatives getAlternatives() { return cAlternatives; }

		//Exp
		public RuleCall getExpParserRuleCall_0() { return cExpParserRuleCall_0; }

		//ScaleOffset
		public RuleCall getScaleOffsetParserRuleCall_1() { return cScaleOffsetParserRuleCall_1; }
	}

	public class ReadRegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReadRegister");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRdaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//ReadRegister:
		//	"rdax" arg1=SPINREGISTER "," arg2=SPINDOUBLE;
		public ParserRule getRule() { return rule; }

		//"rdax" arg1=SPINREGISTER "," arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//"rdax"
		public Keyword getRdaxKeyword_0() { return cRdaxKeyword_0; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_1_0() { return cArg1SPINREGISTERParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class WriteRegisterLowshelfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WriteRegisterLowshelf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWrlxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//WriteRegisterLowshelf:
		//	"wrlx" arg1=SPINREGISTER "," arg2=SPINDOUBLE;
		public ParserRule getRule() { return rule; }

		//"wrlx" arg1=SPINREGISTER "," arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//"wrlx"
		public Keyword getWrlxKeyword_0() { return cWrlxKeyword_0; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_1_0() { return cArg1SPINREGISTERParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class WriteRegisterHighshelfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WriteRegisterHighshelf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWrhxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//WriteRegisterHighshelf:
		//	"wrhx" arg1=SPINREGISTER "," arg2=SPINDOUBLE;
		public ParserRule getRule() { return rule; }

		//"wrhx" arg1=SPINREGISTER "," arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//"wrhx"
		public Keyword getWrhxKeyword_0() { return cWrhxKeyword_0; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_1_0() { return cArg1SPINREGISTERParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class WriteRegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WriteRegister");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWraxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//WriteRegister:
		//	"wrax" arg1=SPINREGISTER "," arg2=SPINDOUBLE;
		public ParserRule getRule() { return rule; }

		//"wrax" arg1=SPINREGISTER "," arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//"wrax"
		public Keyword getWraxKeyword_0() { return cWraxKeyword_0; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_1_0() { return cArg1SPINREGISTERParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class MaxxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Maxx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//Maxx:
		//	"maxx" arg1=SPINREGISTER "," arg2=SPINDOUBLE;
		public ParserRule getRule() { return rule; }

		//"maxx" arg1=SPINREGISTER "," arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//"maxx"
		public Keyword getMaxxKeyword_0() { return cMaxxKeyword_0; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_1_0() { return cArg1SPINREGISTERParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class ReadRegisterFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReadRegisterFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRdfxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//ReadRegisterFilter:
		//	"rdfx" arg1=SPINREGISTER "," arg2=SPINDOUBLE;
		public ParserRule getRule() { return rule; }

		//"rdfx" arg1=SPINREGISTER "," arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//"rdfx"
		public Keyword getRdfxKeyword_0() { return cRdfxKeyword_0; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_1_0() { return cArg1SPINREGISTERParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class MulxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mulx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMulxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1IDTerminalRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		
		//Mulx:
		//	"mulx" arg1=ID;
		public ParserRule getRule() { return rule; }

		//"mulx" arg1=ID
		public Group getGroup() { return cGroup; }

		//"mulx"
		public Keyword getMulxKeyword_0() { return cMulxKeyword_0; }

		//arg1=ID
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//ID
		public RuleCall getArg1IDTerminalRuleCall_1_0() { return cArg1IDTerminalRuleCall_1_0; }
	}

	public class LdaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ldax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLdaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1IDTerminalRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		
		//Ldax:
		//	"ldax" arg1=ID;
		public ParserRule getRule() { return rule; }

		//"ldax" arg1=ID
		public Group getGroup() { return cGroup; }

		//"ldax"
		public Keyword getLdaxKeyword_0() { return cLdaxKeyword_0; }

		//arg1=ID
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//ID
		public RuleCall getArg1IDTerminalRuleCall_1_0() { return cArg1IDTerminalRuleCall_1_0; }
	}

	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINDOUBLEParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//Exp:
		//	"exp" arg1=SPINDOUBLE "," arg2=SPINDOUBLE;
		public ParserRule getRule() { return rule; }

		//"exp" arg1=SPINDOUBLE "," arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//"exp"
		public Keyword getExpKeyword_0() { return cExpKeyword_0; }

		//arg1=SPINDOUBLE
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINDOUBLE
		public RuleCall getArg1SPINDOUBLEParserRuleCall_1_0() { return cArg1SPINDOUBLEParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class LogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Log");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLogKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINDOUBLEParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//Log:
		//	"log" arg1=SPINDOUBLE "," arg2=SPINDOUBLE;
		public ParserRule getRule() { return rule; }

		//"log" arg1=SPINDOUBLE "," arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//"log"
		public Keyword getLogKeyword_0() { return cLogKeyword_0; }

		//arg1=SPINDOUBLE
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINDOUBLE
		public RuleCall getArg1SPINDOUBLEParserRuleCall_1_0() { return cArg1SPINDOUBLEParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class ScaleOffsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScaleOffset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSofKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINDOUBLEParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//ScaleOffset:
		//	"sof" arg1=SPINDOUBLE "," arg2=SPINDOUBLE;
		public ParserRule getRule() { return rule; }

		//"sof" arg1=SPINDOUBLE "," arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//"sof"
		public Keyword getSofKeyword_0() { return cSofKeyword_0; }

		//arg1=SPINDOUBLE
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINDOUBLE
		public RuleCall getArg1SPINDOUBLEParserRuleCall_1_0() { return cArg1SPINDOUBLEParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class WriteDelayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WriteDelay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWraKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINMEMParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//WriteDelay:
		//	"wra" arg1=SPINMEM "," arg2=SPINDOUBLE;
		public ParserRule getRule() { return rule; }

		//"wra" arg1=SPINMEM "," arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//"wra"
		public Keyword getWraKeyword_0() { return cWraKeyword_0; }

		//arg1=SPINMEM
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINMEM
		public RuleCall getArg1SPINMEMParserRuleCall_1_0() { return cArg1SPINMEMParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class WriteAllpassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WriteAllpass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWrapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINMEMParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//WriteAllpass:
		//	"wrap" arg1=SPINMEM "," arg2=SPINDOUBLE;
		public ParserRule getRule() { return rule; }

		//"wrap" arg1=SPINMEM "," arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//"wrap"
		public Keyword getWrapKeyword_0() { return cWrapKeyword_0; }

		//arg1=SPINMEM
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINMEM
		public RuleCall getArg1SPINMEMParserRuleCall_1_0() { return cArg1SPINMEMParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class ReadDelayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReadDelay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRdaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINMEMParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2SPINDOUBLEParserRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		
		//ReadDelay:
		//	"rda" arg1=SPINMEM "," arg2=SPINDOUBLE;
		public ParserRule getRule() { return rule; }

		//"rda" arg1=SPINMEM "," arg2=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//"rda"
		public Keyword getRdaKeyword_0() { return cRdaKeyword_0; }

		//arg1=SPINMEM
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINMEM
		public RuleCall getArg1SPINMEMParserRuleCall_1_0() { return cArg1SPINMEMParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=SPINDOUBLE
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//SPINDOUBLE
		public RuleCall getArg2SPINDOUBLEParserRuleCall_3_0() { return cArg2SPINDOUBLEParserRuleCall_3_0; }
	}

	public class LoadSinLFOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoadSinLFO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWldsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2INTTerminalRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cArg3Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArg3INTTerminalRuleCall_5_0 = (RuleCall)cArg3Assignment_5.eContents().get(0);
		
		//LoadSinLFO:
		//	"wlds" arg1=SPINREGISTER "," arg2=INT "," arg3=INT;
		public ParserRule getRule() { return rule; }

		//"wlds" arg1=SPINREGISTER "," arg2=INT "," arg3=INT
		public Group getGroup() { return cGroup; }

		//"wlds"
		public Keyword getWldsKeyword_0() { return cWldsKeyword_0; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_1_0() { return cArg1SPINREGISTERParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=INT
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//INT
		public RuleCall getArg2INTTerminalRuleCall_3_0() { return cArg2INTTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//arg3=INT
		public Assignment getArg3Assignment_5() { return cArg3Assignment_5; }

		//INT
		public RuleCall getArg3INTTerminalRuleCall_5_0() { return cArg3INTTerminalRuleCall_5_0; }
	}

	public class LoadRampLFOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoadRampLFO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWldrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg2INTTerminalRuleCall_3_0 = (RuleCall)cArg2Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cArg3Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArg3INTTerminalRuleCall_5_0 = (RuleCall)cArg3Assignment_5.eContents().get(0);
		
		//LoadRampLFO:
		//	"wldr" arg1=SPINREGISTER "," arg2=INT "," arg3=INT;
		public ParserRule getRule() { return rule; }

		//"wldr" arg1=SPINREGISTER "," arg2=INT "," arg3=INT
		public Group getGroup() { return cGroup; }

		//"wldr"
		public Keyword getWldrKeyword_0() { return cWldrKeyword_0; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_1_0() { return cArg1SPINREGISTERParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//arg2=INT
		public Assignment getArg2Assignment_3() { return cArg2Assignment_3; }

		//INT
		public RuleCall getArg2INTTerminalRuleCall_3_0() { return cArg2INTTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//arg3=INT
		public Assignment getArg3Assignment_5() { return cArg3Assignment_5; }

		//INT
		public RuleCall getArg3INTTerminalRuleCall_5_0() { return cArg3INTTerminalRuleCall_5_0; }
	}

	public class ChorusReadDelayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChorusReadDelay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoRdaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArg1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_2_0 = (RuleCall)cArg1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArg2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArg2SPINCHOREGFLAGSParserRuleCall_4_0 = (RuleCall)cArg2Assignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cArg3Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cArg3SPINMEMParserRuleCall_6_0 = (RuleCall)cArg3Assignment_6.eContents().get(0);
		
		//// Chorus instructions
		//ChorusReadDelay:
		//	"cho rda" "," arg1=SPINREGISTER "," arg2=SPINCHOREGFLAGS "," arg3=SPINMEM;
		public ParserRule getRule() { return rule; }

		//"cho rda" "," arg1=SPINREGISTER "," arg2=SPINCHOREGFLAGS "," arg3=SPINMEM
		public Group getGroup() { return cGroup; }

		//"cho rda"
		public Keyword getChoRdaKeyword_0() { return cChoRdaKeyword_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_2() { return cArg1Assignment_2; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_2_0() { return cArg1SPINREGISTERParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//arg2=SPINCHOREGFLAGS
		public Assignment getArg2Assignment_4() { return cArg2Assignment_4; }

		//SPINCHOREGFLAGS
		public RuleCall getArg2SPINCHOREGFLAGSParserRuleCall_4_0() { return cArg2SPINCHOREGFLAGSParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//arg3=SPINMEM
		public Assignment getArg3Assignment_6() { return cArg3Assignment_6; }

		//SPINMEM
		public RuleCall getArg3SPINMEMParserRuleCall_6_0() { return cArg3SPINMEMParserRuleCall_6_0; }
	}

	public class ChorusReadValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChorusReadValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoRdalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArg1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArg1SPINREGISTERParserRuleCall_2_0 = (RuleCall)cArg1Assignment_2.eContents().get(0);
		
		//ChorusReadValue:
		//	"cho rdal" "," arg1=SPINREGISTER;
		public ParserRule getRule() { return rule; }

		//"cho rdal" "," arg1=SPINREGISTER
		public Group getGroup() { return cGroup; }

		//"cho rdal"
		public Keyword getChoRdalKeyword_0() { return cChoRdalKeyword_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//arg1=SPINREGISTER
		public Assignment getArg1Assignment_2() { return cArg1Assignment_2; }

		//SPINREGISTER
		public RuleCall getArg1SPINREGISTERParserRuleCall_2_0() { return cArg1SPINREGISTERParserRuleCall_2_0; }
	}

	public class ChorusScaleOffsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChorusScaleOffset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoSofKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArg1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArg1IDTerminalRuleCall_2_0 = (RuleCall)cArg1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArg2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArg2SPINCHOREGFLAGSParserRuleCall_4_0 = (RuleCall)cArg2Assignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cArg3Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cArg3SPINDOUBLEParserRuleCall_6_0 = (RuleCall)cArg3Assignment_6.eContents().get(0);
		
		//ChorusScaleOffset:
		//	"cho sof" "," arg1=ID "," arg2=SPINCHOREGFLAGS "," arg3=SPINDOUBLE;
		public ParserRule getRule() { return rule; }

		//"cho sof" "," arg1=ID "," arg2=SPINCHOREGFLAGS "," arg3=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//"cho sof"
		public Keyword getChoSofKeyword_0() { return cChoSofKeyword_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//arg1=ID
		public Assignment getArg1Assignment_2() { return cArg1Assignment_2; }

		//ID
		public RuleCall getArg1IDTerminalRuleCall_2_0() { return cArg1IDTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//arg2=SPINCHOREGFLAGS
		public Assignment getArg2Assignment_4() { return cArg2Assignment_4; }

		//SPINCHOREGFLAGS
		public RuleCall getArg2SPINCHOREGFLAGSParserRuleCall_4_0() { return cArg2SPINCHOREGFLAGSParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//arg3=SPINDOUBLE
		public Assignment getArg3Assignment_6() { return cArg3Assignment_6; }

		//SPINDOUBLE
		public RuleCall getArg3SPINDOUBLEParserRuleCall_6_0() { return cArg3SPINDOUBLEParserRuleCall_6_0; }
	}

	public class ReadDelayPointerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReadDelayPointer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRmpaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1SPINDOUBLEParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		
		//ReadDelayPointer:
		//	"rmpa" arg1=SPINDOUBLE;
		public ParserRule getRule() { return rule; }

		//"rmpa" arg1=SPINDOUBLE
		public Group getGroup() { return cGroup; }

		//"rmpa"
		public Keyword getRmpaKeyword_0() { return cRmpaKeyword_0; }

		//arg1=SPINDOUBLE
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//SPINDOUBLE
		public RuleCall getArg1SPINDOUBLEParserRuleCall_1_0() { return cArg1SPINDOUBLEParserRuleCall_1_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1BINARY24ParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		
		//// single argument instructions
		//And:
		//	"and" arg1=BINARY24;
		public ParserRule getRule() { return rule; }

		//"and" arg1=BINARY24
		public Group getGroup() { return cGroup; }

		//"and"
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }

		//arg1=BINARY24
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//BINARY24
		public RuleCall getArg1BINARY24ParserRuleCall_1_0() { return cArg1BINARY24ParserRuleCall_1_0; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1BINARY24ParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		
		//Or:
		//	"or" arg1=BINARY24;
		public ParserRule getRule() { return rule; }

		//"or" arg1=BINARY24
		public Group getGroup() { return cGroup; }

		//"or"
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }

		//arg1=BINARY24
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//BINARY24
		public RuleCall getArg1BINARY24ParserRuleCall_1_0() { return cArg1BINARY24ParserRuleCall_1_0; }
	}

	public class XorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Xor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1BINARY24ParserRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		
		//Xor:
		//	"xor" arg1=BINARY24;
		public ParserRule getRule() { return rule; }

		//"xor" arg1=BINARY24
		public Group getGroup() { return cGroup; }

		//"xor"
		public Keyword getXorKeyword_0() { return cXorKeyword_0; }

		//arg1=BINARY24
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//BINARY24
		public RuleCall getArg1BINARY24ParserRuleCall_1_0() { return cArg1BINARY24ParserRuleCall_1_0; }
	}

	public class JamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Jam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArg1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArg1IDTerminalRuleCall_1_0 = (RuleCall)cArg1Assignment_1.eContents().get(0);
		
		//Jam:
		//	"jam" arg1=ID;
		public ParserRule getRule() { return rule; }

		//"jam" arg1=ID
		public Group getGroup() { return cGroup; }

		//"jam"
		public Keyword getJamKeyword_0() { return cJamKeyword_0; }

		//arg1=ID
		public Assignment getArg1Assignment_1() { return cArg1Assignment_1; }

		//ID
		public RuleCall getArg1IDTerminalRuleCall_1_0() { return cArg1IDTerminalRuleCall_1_0; }
	}

	public class ClrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Clr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClrAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// zero argument instructions
		//Clr:
		//	{Clr} "clr";
		public ParserRule getRule() { return rule; }

		//{Clr} "clr"
		public Group getGroup() { return cGroup; }

		//{Clr}
		public Action getClrAction_0() { return cClrAction_0; }

		//"clr"
		public Keyword getClrKeyword_1() { return cClrKeyword_1; }
	}

	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Not:
		//	{Not} "not";
		public ParserRule getRule() { return rule; }

		//{Not} "not"
		public Group getGroup() { return cGroup; }

		//{Not}
		public Action getNotAction_0() { return cNotAction_0; }

		//"not"
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }
	}

	public class AbsaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Absa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbsaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAbsaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Absa:
		//	{Absa} "absa";
		public ParserRule getRule() { return rule; }

		//{Absa} "absa"
		public Group getGroup() { return cGroup; }

		//{Absa}
		public Action getAbsaAction_0() { return cAbsaAction_0; }

		//"absa"
		public Keyword getAbsaKeyword_1() { return cAbsaKeyword_1; }
	}

	public class SkipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Skip");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSkpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFlagsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFlagsIDTerminalRuleCall_1_0 = (RuleCall)cFlagsAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLabelLabelCrossReference_3_0 = (CrossReference)cLabelAssignment_3.eContents().get(0);
		private final RuleCall cLabelLabelIDTerminalRuleCall_3_0_1 = (RuleCall)cLabelLabelCrossReference_3_0.eContents().get(1);
		
		////Then there's Skip
		//Skip:
		//	"skp" flags=ID "," label=[Label];
		public ParserRule getRule() { return rule; }

		//"skp" flags=ID "," label=[Label]
		public Group getGroup() { return cGroup; }

		//"skp"
		public Keyword getSkpKeyword_0() { return cSkpKeyword_0; }

		//flags=ID
		public Assignment getFlagsAssignment_1() { return cFlagsAssignment_1; }

		//ID
		public RuleCall getFlagsIDTerminalRuleCall_1_0() { return cFlagsIDTerminalRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//label=[Label]
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//[Label]
		public CrossReference getLabelLabelCrossReference_3_0() { return cLabelLabelCrossReference_3_0; }

		//ID
		public RuleCall getLabelLabelIDTerminalRuleCall_3_0_1() { return cLabelLabelIDTerminalRuleCall_3_0_1; }
	}

	public class SPINDOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SPINDOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_1_1 = (RuleCall)cGroup_1_1_1.eContents().get(1);
		
		//// --------------- data type rules -----------------------------
		//SPINDOUBLE:
		//	"-"? (ID | INT ("." INT)?);
		public ParserRule getRule() { return rule; }

		//"-"? (ID | INT ("." INT)?)
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//ID | INT ("." INT)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//INT ("." INT)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_0() { return cINTTerminalRuleCall_1_1_0; }

		//("." INT)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_1_0() { return cFullStopKeyword_1_1_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1_1() { return cINTTerminalRuleCall_1_1_1_1; }
	}

	public class SPINREGISTERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SPINREGISTER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SPINREGISTER:
		//	ID | INT;
		public ParserRule getRule() { return rule; }

		//ID | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class SPINCHOREGFLAGSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SPINCHOREGFLAGS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//SPINCHOREGFLAGS:
		//	INT | (ID ("|" ID)*)?;
		public ParserRule getRule() { return rule; }

		//INT | (ID ("|" ID)*)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//(ID ("|" ID)*)?
		public Group getGroup_1() { return cGroup_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//("|" ID)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1_0() { return cVerticalLineKeyword_1_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }
	}

	public class SPINMEMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SPINMEM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBufferAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBufferSPINBUFParserRuleCall_0_0 = (RuleCall)cBufferAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cOffsetAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cOffsetOffsetCrossReference_1_1_0 = (CrossReference)cOffsetAssignment_1_1.eContents().get(0);
		private final RuleCall cOffsetOffsetIDTerminalRuleCall_1_1_0_1 = (RuleCall)cOffsetOffsetCrossReference_1_1_0.eContents().get(1);
		
		//SPINMEM:
		//	buffer=SPINBUF (value=INT | offset=[Offset])?;
		public ParserRule getRule() { return rule; }

		//buffer=SPINBUF (value=INT | offset=[Offset])?
		public Group getGroup() { return cGroup; }

		//buffer=SPINBUF
		public Assignment getBufferAssignment_0() { return cBufferAssignment_0; }

		//SPINBUF
		public RuleCall getBufferSPINBUFParserRuleCall_0_0() { return cBufferSPINBUFParserRuleCall_0_0; }

		//(value=INT | offset=[Offset])?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=INT
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0_0() { return cValueINTTerminalRuleCall_1_0_0; }

		//offset=[Offset]
		public Assignment getOffsetAssignment_1_1() { return cOffsetAssignment_1_1; }

		//[Offset]
		public CrossReference getOffsetOffsetCrossReference_1_1_0() { return cOffsetOffsetCrossReference_1_1_0; }

		//ID
		public RuleCall getOffsetOffsetIDTerminalRuleCall_1_1_0_1() { return cOffsetOffsetIDTerminalRuleCall_1_1_0_1; }
	}

	public class SPINBUFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SPINBUF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cPlusSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//SPINBUF:
		//	ID ("#" | "^")? ("+" | "-")?;
		public ParserRule getRule() { return rule; }

		//ID ("#" | "^")? ("+" | "-")?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("#" | "^")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"#"
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }

		//("+" | "-")?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"+"
		public Keyword getPlusSignKeyword_2_0() { return cPlusSignKeyword_2_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }
	}

	public class BINARY24Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BINARY24");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Keyword cPercentSignKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDollarSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//BINARY24:
		//	("%" INT) ID* | "$" INT* ID*;
		public ParserRule getRule() { return rule; }

		//("%" INT) ID* | "$" INT* ID*
		public Alternatives getAlternatives() { return cAlternatives; }

		//("%" INT) ID*
		public Group getGroup_0() { return cGroup_0; }

		//"%" INT
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"%"
		public Keyword getPercentSignKeyword_0_0_0() { return cPercentSignKeyword_0_0_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_0_1() { return cINTTerminalRuleCall_0_0_1; }

		//ID*
		public RuleCall getIDTerminalRuleCall_0_1() { return cIDTerminalRuleCall_0_1; }

		//"$" INT* ID*
		public Group getGroup_1() { return cGroup_1; }

		//"$"
		public Keyword getDollarSignKeyword_1_0() { return cDollarSignKeyword_1_0; }

		//INT*
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }

		//ID*
		public RuleCall getIDTerminalRuleCall_1_2() { return cIDTerminalRuleCall_1_2; }
	}
	
	
	private ProgramElements pProgram;
	private PinElements pPin;
	private InputPinElements pInputPin;
	private OutputPinElements pOutputPin;
	private AudioInputElements pAudioInput;
	private AudioOutputElements pAudioOutput;
	private ControlInputElements pControlInput;
	private ControlOutputElements pControlOutput;
	private ControlElements pControl;
	private SliderElements pSlider;
	private CheckBoxElements pCheckBox;
	private ControlLabelElements pControlLabel;
	private SpinElementElements pSpinElement;
	private EquateElements pEquate;
	private MemElements pMem;
	private OffsetElements pOffset;
	private CommentElements pComment;
	private LabelElements pLabel;
	private MacroElements pMacro;
	private IsPinConnectedElements pIsPinConnected;
	private IsElseElements pIsElse;
	private IsEndifElements pIsEndif;
	private GetInputDefaultElements pGetInputDefault;
	private GetDelayScaleControlElements pGetDelayScaleControl;
	private GetBaseAddressElements pGetBaseAddress;
	private SetOutputPinElements pSetOutputPin;
	private InstructionElements pInstruction;
	private Inst_B6_S1_14Elements pInst_B6_S1_14;
	private Inst_B15_S1_9Elements pInst_B15_S1_9;
	private Inst_B6Elements pInst_B6;
	private Inst_B24Elements pInst_B24;
	private Inst_X0Elements pInst_X0;
	private Inst_S1_14_S1_10Elements pInst_S1_14_S1_10;
	private ReadRegisterElements pReadRegister;
	private WriteRegisterLowshelfElements pWriteRegisterLowshelf;
	private WriteRegisterHighshelfElements pWriteRegisterHighshelf;
	private WriteRegisterElements pWriteRegister;
	private MaxxElements pMaxx;
	private ReadRegisterFilterElements pReadRegisterFilter;
	private MulxElements pMulx;
	private LdaxElements pLdax;
	private ExpElements pExp;
	private LogElements pLog;
	private ScaleOffsetElements pScaleOffset;
	private WriteDelayElements pWriteDelay;
	private WriteAllpassElements pWriteAllpass;
	private ReadDelayElements pReadDelay;
	private LoadSinLFOElements pLoadSinLFO;
	private LoadRampLFOElements pLoadRampLFO;
	private ChorusReadDelayElements pChorusReadDelay;
	private ChorusReadValueElements pChorusReadValue;
	private ChorusScaleOffsetElements pChorusScaleOffset;
	private ReadDelayPointerElements pReadDelayPointer;
	private AndElements pAnd;
	private OrElements pOr;
	private XorElements pXor;
	private JamElements pJam;
	private ClrElements pClr;
	private NotElements pNot;
	private AbsaElements pAbsa;
	private SkipElements pSkip;
	private TerminalRule tSC_COMMENT;
	private SPINDOUBLEElements pSPINDOUBLE;
	private SPINREGISTERElements pSPINREGISTER;
	private SPINCHOREGFLAGSElements pSPINCHOREGFLAGS;
	private SPINMEMElements pSPINMEM;
	private SPINBUFElements pSPINBUF;
	private BINARY24Elements pBINARY24;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SpinCADGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.holycityaudio.spincad.SpinCAD".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	"@name" name=ID pins+=Pin+ controls+=Control* elements+=SpinElement+;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//// ---------- Pins ------------------
	//Pin:
	//	InputPin | OutputPin;
	public PinElements getPinAccess() {
		return (pPin != null) ? pPin : (pPin = new PinElements());
	}
	
	public ParserRule getPinRule() {
		return getPinAccess().getRule();
	}

	//InputPin:
	//	AudioInput | ControlInput;
	public InputPinElements getInputPinAccess() {
		return (pInputPin != null) ? pInputPin : (pInputPin = new InputPinElements());
	}
	
	public ParserRule getInputPinRule() {
		return getInputPinAccess().getRule();
	}

	//OutputPin:
	//	AudioOutput | ControlOutput;
	public OutputPinElements getOutputPinAccess() {
		return (pOutputPin != null) ? pOutputPin : (pOutputPin = new OutputPinElements());
	}
	
	public ParserRule getOutputPinRule() {
		return getOutputPinAccess().getRule();
	}

	//AudioInput:
	//	"@audioInput" varName=ID name=ID;
	public AudioInputElements getAudioInputAccess() {
		return (pAudioInput != null) ? pAudioInput : (pAudioInput = new AudioInputElements());
	}
	
	public ParserRule getAudioInputRule() {
		return getAudioInputAccess().getRule();
	}

	//AudioOutput:
	//	"@audioOutput" varName=ID name=ID;
	public AudioOutputElements getAudioOutputAccess() {
		return (pAudioOutput != null) ? pAudioOutput : (pAudioOutput = new AudioOutputElements());
	}
	
	public ParserRule getAudioOutputRule() {
		return getAudioOutputAccess().getRule();
	}

	//ControlInput:
	//	"@controlInput" varName=ID name=ID;
	public ControlInputElements getControlInputAccess() {
		return (pControlInput != null) ? pControlInput : (pControlInput = new ControlInputElements());
	}
	
	public ParserRule getControlInputRule() {
		return getControlInputAccess().getRule();
	}

	//ControlOutput:
	//	"@controlOutput" varName=ID name=ID;
	public ControlOutputElements getControlOutputAccess() {
		return (pControlOutput != null) ? pControlOutput : (pControlOutput = new ControlOutputElements());
	}
	
	public ParserRule getControlOutputRule() {
		return getControlOutputAccess().getRule();
	}

	//// ---------- Controls (popup control panel for block settings) ------------------
	//Control:
	//	Slider | CheckBox | controlLabel;
	public ControlElements getControlAccess() {
		return (pControl != null) ? pControl : (pControl = new ControlElements());
	}
	
	public ParserRule getControlRule() {
		return getControlAccess().getRule();
	}

	//Slider:
	//	"@slider" varName=ID label=ID;
	public SliderElements getSliderAccess() {
		return (pSlider != null) ? pSlider : (pSlider = new SliderElements());
	}
	
	public ParserRule getSliderRule() {
		return getSliderAccess().getRule();
	}

	//CheckBox:
	//	"@checkbox" varName=ID label=ID;
	public CheckBoxElements getCheckBoxAccess() {
		return (pCheckBox != null) ? pCheckBox : (pCheckBox = new CheckBoxElements());
	}
	
	public ParserRule getCheckBoxRule() {
		return getCheckBoxAccess().getRule();
	}

	//controlLabel:
	//	"@controlLabel" varName=ID label=ID;
	public ControlLabelElements getControlLabelAccess() {
		return (pControlLabel != null) ? pControlLabel : (pControlLabel = new ControlLabelElements());
	}
	
	public ParserRule getControlLabelRule() {
		return getControlLabelAccess().getRule();
	}

	//// --------------- Spin ASM Elements	
	//SpinElement:
	//	Equate | Mem | Instruction | Label | Comment | Macro | Offset;
	public SpinElementElements getSpinElementAccess() {
		return (pSpinElement != null) ? pSpinElement : (pSpinElement = new SpinElementElements());
	}
	
	public ParserRule getSpinElementRule() {
		return getSpinElementAccess().getRule();
	}

	//Equate:
	//	"equ" ename=ID value=SPINDOUBLE;
	public EquateElements getEquateAccess() {
		return (pEquate != null) ? pEquate : (pEquate = new EquateElements());
	}
	
	public ParserRule getEquateRule() {
		return getEquateAccess().getRule();
	}

	//Mem:
	//	"mem" buffer=ID length=SPINREGISTER;
	public MemElements getMemAccess() {
		return (pMem != null) ? pMem : (pMem = new MemElements());
	}
	
	public ParserRule getMemRule() {
		return getMemAccess().getRule();
	}

	//Offset:
	//	"offset" name=ID length=INT;
	public OffsetElements getOffsetAccess() {
		return (pOffset != null) ? pOffset : (pOffset = new OffsetElements());
	}
	
	public ParserRule getOffsetRule() {
		return getOffsetAccess().getRule();
	}

	//Comment:
	//	remark=SC_COMMENT;
	public CommentElements getCommentAccess() {
		return (pComment != null) ? pComment : (pComment = new CommentElements());
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//Label:
	//	name=ID ":";
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//// - SpinCAD macro for conditional expressions within generateCode()
	//// also for special function calls etc.
	//Macro:
	//	IsPinConnected | IsElse | IsEndif | GetInputDefault | GetDelayScaleControl | SetOutputPin | GetBaseAddress;
	public MacroElements getMacroAccess() {
		return (pMacro != null) ? pMacro : (pMacro = new MacroElements());
	}
	
	public ParserRule getMacroRule() {
		return getMacroAccess().getRule();
	}

	//IsPinConnected:
	//	"@isPinConnected" arg1=ID;
	public IsPinConnectedElements getIsPinConnectedAccess() {
		return (pIsPinConnected != null) ? pIsPinConnected : (pIsPinConnected = new IsPinConnectedElements());
	}
	
	public ParserRule getIsPinConnectedRule() {
		return getIsPinConnectedAccess().getRule();
	}

	//IsElse:
	//	{IsElse} "@else";
	public IsElseElements getIsElseAccess() {
		return (pIsElse != null) ? pIsElse : (pIsElse = new IsElseElements());
	}
	
	public ParserRule getIsElseRule() {
		return getIsElseAccess().getRule();
	}

	//IsEndif:
	//	{IsEndif} "@endif";
	public IsEndifElements getIsEndifAccess() {
		return (pIsEndif != null) ? pIsEndif : (pIsEndif = new IsEndifElements());
	}
	
	public ParserRule getIsEndifRule() {
		return getIsEndifAccess().getRule();
	}

	//GetInputDefault:
	//	"@getInputDefault" name=ID variable=ID scale=SPINDOUBLE defaultVal=SPINDOUBLE;
	public GetInputDefaultElements getGetInputDefaultAccess() {
		return (pGetInputDefault != null) ? pGetInputDefault : (pGetInputDefault = new GetInputDefaultElements());
	}
	
	public ParserRule getGetInputDefaultRule() {
		return getGetInputDefaultAccess().getRule();
	}

	//GetDelayScaleControl:
	//	"@getDelayScaleControl" length=ID buffer=ID control=ID?;
	public GetDelayScaleControlElements getGetDelayScaleControlAccess() {
		return (pGetDelayScaleControl != null) ? pGetDelayScaleControl : (pGetDelayScaleControl = new GetDelayScaleControlElements());
	}
	
	public ParserRule getGetDelayScaleControlRule() {
		return getGetDelayScaleControlAccess().getRule();
	}

	//GetBaseAddress:
	//	{GetBaseAddress} "@getBaseAddress";
	public GetBaseAddressElements getGetBaseAddressAccess() {
		return (pGetBaseAddress != null) ? pGetBaseAddress : (pGetBaseAddress = new GetBaseAddressElements());
	}
	
	public ParserRule getGetBaseAddressRule() {
		return getGetBaseAddressAccess().getRule();
	}

	//SetOutputPin:
	//	"@setOutputPin" pinName=ID varName=ID;
	public SetOutputPinElements getSetOutputPinAccess() {
		return (pSetOutputPin != null) ? pSetOutputPin : (pSetOutputPin = new SetOutputPinElements());
	}
	
	public ParserRule getSetOutputPinRule() {
		return getSetOutputPinAccess().getRule();
	}

	////------------------------ regular Spin ASM instructions
	//Instruction:
	//	Inst_B15_S1_9 | Inst_B6_S1_14 | Inst_S1_14_S1_10 | Inst_B6 | Inst_B24 | Skip | Jam | Inst_X0 | LoadSinLFO |
	//	LoadRampLFO | ChorusReadDelay | ChorusReadValue | ChorusScaleOffset | Log | ReadDelayPointer;
	public InstructionElements getInstructionAccess() {
		return (pInstruction != null) ? pInstruction : (pInstruction = new InstructionElements());
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Inst_B6_S1_14:
	//	ReadRegister | WriteRegister | ReadRegisterFilter | Maxx | WriteRegisterHighshelf | WriteRegisterLowshelf;
	public Inst_B6_S1_14Elements getInst_B6_S1_14Access() {
		return (pInst_B6_S1_14 != null) ? pInst_B6_S1_14 : (pInst_B6_S1_14 = new Inst_B6_S1_14Elements());
	}
	
	public ParserRule getInst_B6_S1_14Rule() {
		return getInst_B6_S1_14Access().getRule();
	}

	//Inst_B15_S1_9:
	//	ReadDelay | WriteDelay | WriteAllpass;
	public Inst_B15_S1_9Elements getInst_B15_S1_9Access() {
		return (pInst_B15_S1_9 != null) ? pInst_B15_S1_9 : (pInst_B15_S1_9 = new Inst_B15_S1_9Elements());
	}
	
	public ParserRule getInst_B15_S1_9Rule() {
		return getInst_B15_S1_9Access().getRule();
	}

	//Inst_B6:
	//	Mulx | Ldax;
	public Inst_B6Elements getInst_B6Access() {
		return (pInst_B6 != null) ? pInst_B6 : (pInst_B6 = new Inst_B6Elements());
	}
	
	public ParserRule getInst_B6Rule() {
		return getInst_B6Access().getRule();
	}

	//Inst_B24:
	//	And | Or | Xor;
	public Inst_B24Elements getInst_B24Access() {
		return (pInst_B24 != null) ? pInst_B24 : (pInst_B24 = new Inst_B24Elements());
	}
	
	public ParserRule getInst_B24Rule() {
		return getInst_B24Access().getRule();
	}

	//Inst_X0:
	//	Clr | Not | Absa;
	public Inst_X0Elements getInst_X0Access() {
		return (pInst_X0 != null) ? pInst_X0 : (pInst_X0 = new Inst_X0Elements());
	}
	
	public ParserRule getInst_X0Rule() {
		return getInst_X0Access().getRule();
	}

	//Inst_S1_14_S1_10:
	//	Exp | ScaleOffset;
	public Inst_S1_14_S1_10Elements getInst_S1_14_S1_10Access() {
		return (pInst_S1_14_S1_10 != null) ? pInst_S1_14_S1_10 : (pInst_S1_14_S1_10 = new Inst_S1_14_S1_10Elements());
	}
	
	public ParserRule getInst_S1_14_S1_10Rule() {
		return getInst_S1_14_S1_10Access().getRule();
	}

	//ReadRegister:
	//	"rdax" arg1=SPINREGISTER "," arg2=SPINDOUBLE;
	public ReadRegisterElements getReadRegisterAccess() {
		return (pReadRegister != null) ? pReadRegister : (pReadRegister = new ReadRegisterElements());
	}
	
	public ParserRule getReadRegisterRule() {
		return getReadRegisterAccess().getRule();
	}

	//WriteRegisterLowshelf:
	//	"wrlx" arg1=SPINREGISTER "," arg2=SPINDOUBLE;
	public WriteRegisterLowshelfElements getWriteRegisterLowshelfAccess() {
		return (pWriteRegisterLowshelf != null) ? pWriteRegisterLowshelf : (pWriteRegisterLowshelf = new WriteRegisterLowshelfElements());
	}
	
	public ParserRule getWriteRegisterLowshelfRule() {
		return getWriteRegisterLowshelfAccess().getRule();
	}

	//WriteRegisterHighshelf:
	//	"wrhx" arg1=SPINREGISTER "," arg2=SPINDOUBLE;
	public WriteRegisterHighshelfElements getWriteRegisterHighshelfAccess() {
		return (pWriteRegisterHighshelf != null) ? pWriteRegisterHighshelf : (pWriteRegisterHighshelf = new WriteRegisterHighshelfElements());
	}
	
	public ParserRule getWriteRegisterHighshelfRule() {
		return getWriteRegisterHighshelfAccess().getRule();
	}

	//WriteRegister:
	//	"wrax" arg1=SPINREGISTER "," arg2=SPINDOUBLE;
	public WriteRegisterElements getWriteRegisterAccess() {
		return (pWriteRegister != null) ? pWriteRegister : (pWriteRegister = new WriteRegisterElements());
	}
	
	public ParserRule getWriteRegisterRule() {
		return getWriteRegisterAccess().getRule();
	}

	//Maxx:
	//	"maxx" arg1=SPINREGISTER "," arg2=SPINDOUBLE;
	public MaxxElements getMaxxAccess() {
		return (pMaxx != null) ? pMaxx : (pMaxx = new MaxxElements());
	}
	
	public ParserRule getMaxxRule() {
		return getMaxxAccess().getRule();
	}

	//ReadRegisterFilter:
	//	"rdfx" arg1=SPINREGISTER "," arg2=SPINDOUBLE;
	public ReadRegisterFilterElements getReadRegisterFilterAccess() {
		return (pReadRegisterFilter != null) ? pReadRegisterFilter : (pReadRegisterFilter = new ReadRegisterFilterElements());
	}
	
	public ParserRule getReadRegisterFilterRule() {
		return getReadRegisterFilterAccess().getRule();
	}

	//Mulx:
	//	"mulx" arg1=ID;
	public MulxElements getMulxAccess() {
		return (pMulx != null) ? pMulx : (pMulx = new MulxElements());
	}
	
	public ParserRule getMulxRule() {
		return getMulxAccess().getRule();
	}

	//Ldax:
	//	"ldax" arg1=ID;
	public LdaxElements getLdaxAccess() {
		return (pLdax != null) ? pLdax : (pLdax = new LdaxElements());
	}
	
	public ParserRule getLdaxRule() {
		return getLdaxAccess().getRule();
	}

	//Exp:
	//	"exp" arg1=SPINDOUBLE "," arg2=SPINDOUBLE;
	public ExpElements getExpAccess() {
		return (pExp != null) ? pExp : (pExp = new ExpElements());
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}

	//Log:
	//	"log" arg1=SPINDOUBLE "," arg2=SPINDOUBLE;
	public LogElements getLogAccess() {
		return (pLog != null) ? pLog : (pLog = new LogElements());
	}
	
	public ParserRule getLogRule() {
		return getLogAccess().getRule();
	}

	//ScaleOffset:
	//	"sof" arg1=SPINDOUBLE "," arg2=SPINDOUBLE;
	public ScaleOffsetElements getScaleOffsetAccess() {
		return (pScaleOffset != null) ? pScaleOffset : (pScaleOffset = new ScaleOffsetElements());
	}
	
	public ParserRule getScaleOffsetRule() {
		return getScaleOffsetAccess().getRule();
	}

	//WriteDelay:
	//	"wra" arg1=SPINMEM "," arg2=SPINDOUBLE;
	public WriteDelayElements getWriteDelayAccess() {
		return (pWriteDelay != null) ? pWriteDelay : (pWriteDelay = new WriteDelayElements());
	}
	
	public ParserRule getWriteDelayRule() {
		return getWriteDelayAccess().getRule();
	}

	//WriteAllpass:
	//	"wrap" arg1=SPINMEM "," arg2=SPINDOUBLE;
	public WriteAllpassElements getWriteAllpassAccess() {
		return (pWriteAllpass != null) ? pWriteAllpass : (pWriteAllpass = new WriteAllpassElements());
	}
	
	public ParserRule getWriteAllpassRule() {
		return getWriteAllpassAccess().getRule();
	}

	//ReadDelay:
	//	"rda" arg1=SPINMEM "," arg2=SPINDOUBLE;
	public ReadDelayElements getReadDelayAccess() {
		return (pReadDelay != null) ? pReadDelay : (pReadDelay = new ReadDelayElements());
	}
	
	public ParserRule getReadDelayRule() {
		return getReadDelayAccess().getRule();
	}

	//LoadSinLFO:
	//	"wlds" arg1=SPINREGISTER "," arg2=INT "," arg3=INT;
	public LoadSinLFOElements getLoadSinLFOAccess() {
		return (pLoadSinLFO != null) ? pLoadSinLFO : (pLoadSinLFO = new LoadSinLFOElements());
	}
	
	public ParserRule getLoadSinLFORule() {
		return getLoadSinLFOAccess().getRule();
	}

	//LoadRampLFO:
	//	"wldr" arg1=SPINREGISTER "," arg2=INT "," arg3=INT;
	public LoadRampLFOElements getLoadRampLFOAccess() {
		return (pLoadRampLFO != null) ? pLoadRampLFO : (pLoadRampLFO = new LoadRampLFOElements());
	}
	
	public ParserRule getLoadRampLFORule() {
		return getLoadRampLFOAccess().getRule();
	}

	//// Chorus instructions
	//ChorusReadDelay:
	//	"cho rda" "," arg1=SPINREGISTER "," arg2=SPINCHOREGFLAGS "," arg3=SPINMEM;
	public ChorusReadDelayElements getChorusReadDelayAccess() {
		return (pChorusReadDelay != null) ? pChorusReadDelay : (pChorusReadDelay = new ChorusReadDelayElements());
	}
	
	public ParserRule getChorusReadDelayRule() {
		return getChorusReadDelayAccess().getRule();
	}

	//ChorusReadValue:
	//	"cho rdal" "," arg1=SPINREGISTER;
	public ChorusReadValueElements getChorusReadValueAccess() {
		return (pChorusReadValue != null) ? pChorusReadValue : (pChorusReadValue = new ChorusReadValueElements());
	}
	
	public ParserRule getChorusReadValueRule() {
		return getChorusReadValueAccess().getRule();
	}

	//ChorusScaleOffset:
	//	"cho sof" "," arg1=ID "," arg2=SPINCHOREGFLAGS "," arg3=SPINDOUBLE;
	public ChorusScaleOffsetElements getChorusScaleOffsetAccess() {
		return (pChorusScaleOffset != null) ? pChorusScaleOffset : (pChorusScaleOffset = new ChorusScaleOffsetElements());
	}
	
	public ParserRule getChorusScaleOffsetRule() {
		return getChorusScaleOffsetAccess().getRule();
	}

	//ReadDelayPointer:
	//	"rmpa" arg1=SPINDOUBLE;
	public ReadDelayPointerElements getReadDelayPointerAccess() {
		return (pReadDelayPointer != null) ? pReadDelayPointer : (pReadDelayPointer = new ReadDelayPointerElements());
	}
	
	public ParserRule getReadDelayPointerRule() {
		return getReadDelayPointerAccess().getRule();
	}

	//// single argument instructions
	//And:
	//	"and" arg1=BINARY24;
	public AndElements getAndAccess() {
		return (pAnd != null) ? pAnd : (pAnd = new AndElements());
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Or:
	//	"or" arg1=BINARY24;
	public OrElements getOrAccess() {
		return (pOr != null) ? pOr : (pOr = new OrElements());
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//Xor:
	//	"xor" arg1=BINARY24;
	public XorElements getXorAccess() {
		return (pXor != null) ? pXor : (pXor = new XorElements());
	}
	
	public ParserRule getXorRule() {
		return getXorAccess().getRule();
	}

	//Jam:
	//	"jam" arg1=ID;
	public JamElements getJamAccess() {
		return (pJam != null) ? pJam : (pJam = new JamElements());
	}
	
	public ParserRule getJamRule() {
		return getJamAccess().getRule();
	}

	//// zero argument instructions
	//Clr:
	//	{Clr} "clr";
	public ClrElements getClrAccess() {
		return (pClr != null) ? pClr : (pClr = new ClrElements());
	}
	
	public ParserRule getClrRule() {
		return getClrAccess().getRule();
	}

	//Not:
	//	{Not} "not";
	public NotElements getNotAccess() {
		return (pNot != null) ? pNot : (pNot = new NotElements());
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}

	//Absa:
	//	{Absa} "absa";
	public AbsaElements getAbsaAccess() {
		return (pAbsa != null) ? pAbsa : (pAbsa = new AbsaElements());
	}
	
	public ParserRule getAbsaRule() {
		return getAbsaAccess().getRule();
	}

	////Then there's Skip
	//Skip:
	//	"skp" flags=ID "," label=[Label];
	public SkipElements getSkipAccess() {
		return (pSkip != null) ? pSkip : (pSkip = new SkipElements());
	}
	
	public ParserRule getSkipRule() {
		return getSkipAccess().getRule();
	}

	////----------  semi-colon comment terminal rule  --------------
	//terminal SC_COMMENT:
	//	";" !("\n" | "\r")* ("\r"? "\n");
	public TerminalRule getSC_COMMENTRule() {
		return (tSC_COMMENT != null) ? tSC_COMMENT : (tSC_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SC_COMMENT"));
	} 

	//// --------------- data type rules -----------------------------
	//SPINDOUBLE:
	//	"-"? (ID | INT ("." INT)?);
	public SPINDOUBLEElements getSPINDOUBLEAccess() {
		return (pSPINDOUBLE != null) ? pSPINDOUBLE : (pSPINDOUBLE = new SPINDOUBLEElements());
	}
	
	public ParserRule getSPINDOUBLERule() {
		return getSPINDOUBLEAccess().getRule();
	}

	//SPINREGISTER:
	//	ID | INT;
	public SPINREGISTERElements getSPINREGISTERAccess() {
		return (pSPINREGISTER != null) ? pSPINREGISTER : (pSPINREGISTER = new SPINREGISTERElements());
	}
	
	public ParserRule getSPINREGISTERRule() {
		return getSPINREGISTERAccess().getRule();
	}

	//SPINCHOREGFLAGS:
	//	INT | (ID ("|" ID)*)?;
	public SPINCHOREGFLAGSElements getSPINCHOREGFLAGSAccess() {
		return (pSPINCHOREGFLAGS != null) ? pSPINCHOREGFLAGS : (pSPINCHOREGFLAGS = new SPINCHOREGFLAGSElements());
	}
	
	public ParserRule getSPINCHOREGFLAGSRule() {
		return getSPINCHOREGFLAGSAccess().getRule();
	}

	//SPINMEM:
	//	buffer=SPINBUF (value=INT | offset=[Offset])?;
	public SPINMEMElements getSPINMEMAccess() {
		return (pSPINMEM != null) ? pSPINMEM : (pSPINMEM = new SPINMEMElements());
	}
	
	public ParserRule getSPINMEMRule() {
		return getSPINMEMAccess().getRule();
	}

	//SPINBUF:
	//	ID ("#" | "^")? ("+" | "-")?;
	public SPINBUFElements getSPINBUFAccess() {
		return (pSPINBUF != null) ? pSPINBUF : (pSPINBUF = new SPINBUFElements());
	}
	
	public ParserRule getSPINBUFRule() {
		return getSPINBUFAccess().getRule();
	}

	//BINARY24:
	//	("%" INT) ID* | "$" INT* ID*;
	public BINARY24Elements getBINARY24Access() {
		return (pBINARY24 != null) ? pBINARY24 : (pBINARY24 = new BINARY24Elements());
	}
	
	public ParserRule getBINARY24Rule() {
		return getBINARY24Access().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
