/*
* generated by Xtext
*/
grammar InternalSpinCAD;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.holycityaudio.spincad.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.holycityaudio.spincad.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.holycityaudio.spincad.services.SpinCADGrammarAccess;

}

@parser::members {

 	private SpinCADGrammarAccess grammarAccess;
 	
    public InternalSpinCADParser(TokenStream input, SpinCADGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected SpinCADGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@name' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getNameKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProgramRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getPinsPinParserRuleCall_2_0()); 
	    }
		lv_pins_2_0=rulePin		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"pins",
        		lv_pins_2_0, 
        		"Pin");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getElementsSpinElementParserRuleCall_3_0()); 
	    }
		lv_elements_3_0=ruleSpinElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"SpinElement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRulePin
entryRulePin returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPinRule()); }
	 iv_rulePin=rulePin 
	 { $current=$iv_rulePin.current; } 
	 EOF 
;

// Rule Pin
rulePin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPinAccess().getInputPinParserRuleCall_0()); 
    }
    this_InputPin_0=ruleInputPin
    { 
        $current = $this_InputPin_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPinAccess().getOutputPinParserRuleCall_1()); 
    }
    this_OutputPin_1=ruleOutputPin
    { 
        $current = $this_OutputPin_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInputPin
entryRuleInputPin returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputPinRule()); }
	 iv_ruleInputPin=ruleInputPin 
	 { $current=$iv_ruleInputPin.current; } 
	 EOF 
;

// Rule InputPin
ruleInputPin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInputPinAccess().getAudioInputParserRuleCall_0()); 
    }
    this_AudioInput_0=ruleAudioInput
    { 
        $current = $this_AudioInput_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInputPinAccess().getControlInputParserRuleCall_1()); 
    }
    this_ControlInput_1=ruleControlInput
    { 
        $current = $this_ControlInput_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOutputPin
entryRuleOutputPin returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputPinRule()); }
	 iv_ruleOutputPin=ruleOutputPin 
	 { $current=$iv_ruleOutputPin.current; } 
	 EOF 
;

// Rule OutputPin
ruleOutputPin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOutputPinAccess().getAudioOutputParserRuleCall_0()); 
    }
    this_AudioOutput_0=ruleAudioOutput
    { 
        $current = $this_AudioOutput_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOutputPinAccess().getControlOutputParserRuleCall_1()); 
    }
    this_ControlOutput_1=ruleControlOutput
    { 
        $current = $this_ControlOutput_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAudioInput
entryRuleAudioInput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAudioInputRule()); }
	 iv_ruleAudioInput=ruleAudioInput 
	 { $current=$iv_ruleAudioInput.current; } 
	 EOF 
;

// Rule AudioInput
ruleAudioInput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@audioInput' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAudioInputAccess().getAudioInputKeyword_0());
    }
(
(
		lv_varName_1_0=RULE_ID
		{
			newLeafNode(lv_varName_1_0, grammarAccess.getAudioInputAccess().getVarNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAudioInputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"varName",
        		lv_varName_1_0, 
        		"ID");
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getAudioInputAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAudioInputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleAudioOutput
entryRuleAudioOutput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAudioOutputRule()); }
	 iv_ruleAudioOutput=ruleAudioOutput 
	 { $current=$iv_ruleAudioOutput.current; } 
	 EOF 
;

// Rule AudioOutput
ruleAudioOutput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@audioOutput' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAudioOutputAccess().getAudioOutputKeyword_0());
    }
(
(
		lv_varName_1_0=RULE_ID
		{
			newLeafNode(lv_varName_1_0, grammarAccess.getAudioOutputAccess().getVarNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAudioOutputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"varName",
        		lv_varName_1_0, 
        		"ID");
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getAudioOutputAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAudioOutputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleControlInput
entryRuleControlInput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getControlInputRule()); }
	 iv_ruleControlInput=ruleControlInput 
	 { $current=$iv_ruleControlInput.current; } 
	 EOF 
;

// Rule ControlInput
ruleControlInput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@controlInput' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getControlInputAccess().getControlInputKeyword_0());
    }
(
(
		lv_varName_1_0=RULE_ID
		{
			newLeafNode(lv_varName_1_0, grammarAccess.getControlInputAccess().getVarNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getControlInputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"varName",
        		lv_varName_1_0, 
        		"ID");
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getControlInputAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getControlInputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleControlOutput
entryRuleControlOutput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getControlOutputRule()); }
	 iv_ruleControlOutput=ruleControlOutput 
	 { $current=$iv_ruleControlOutput.current; } 
	 EOF 
;

// Rule ControlOutput
ruleControlOutput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@controlOutput' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getControlOutputAccess().getControlOutputKeyword_0());
    }
(
(
		lv_varName_1_0=RULE_ID
		{
			newLeafNode(lv_varName_1_0, grammarAccess.getControlOutputAccess().getVarNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getControlOutputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"varName",
        		lv_varName_1_0, 
        		"ID");
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getControlOutputAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getControlOutputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleSpinElement
entryRuleSpinElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpinElementRule()); }
	 iv_ruleSpinElement=ruleSpinElement 
	 { $current=$iv_ruleSpinElement.current; } 
	 EOF 
;

// Rule SpinElement
ruleSpinElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSpinElementAccess().getSpinIntParserRuleCall_0()); 
    }
    this_SpinInt_0=ruleSpinInt
    { 
        $current = $this_SpinInt_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpinElementAccess().getControlParserRuleCall_1()); 
    }
    this_Control_1=ruleControl
    { 
        $current = $this_Control_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpinElementAccess().getSpinEquateParserRuleCall_2()); 
    }
    this_SpinEquate_2=ruleSpinEquate
    { 
        $current = $this_SpinEquate_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpinElementAccess().getSpinBoolParserRuleCall_3()); 
    }
    this_SpinBool_3=ruleSpinBool
    { 
        $current = $this_SpinBool_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpinElementAccess().getMemParserRuleCall_4()); 
    }
    this_Mem_4=ruleMem
    { 
        $current = $this_Mem_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpinElementAccess().getInstructionParserRuleCall_5()); 
    }
    this_Instruction_5=ruleInstruction
    { 
        $current = $this_Instruction_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpinElementAccess().getLabelParserRuleCall_6()); 
    }
    this_Label_6=ruleLabel
    { 
        $current = $this_Label_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpinElementAccess().getCommentParserRuleCall_7()); 
    }
    this_Comment_7=ruleComment
    { 
        $current = $this_Comment_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpinElementAccess().getMacroParserRuleCall_8()); 
    }
    this_Macro_8=ruleMacro
    { 
        $current = $this_Macro_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSpinElementAccess().getOffsetParserRuleCall_9()); 
    }
    this_Offset_9=ruleOffset
    { 
        $current = $this_Offset_9.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSpinEquate
entryRuleSpinEquate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpinEquateRule()); }
	 iv_ruleSpinEquate=ruleSpinEquate 
	 { $current=$iv_ruleSpinEquate.current; } 
	 EOF 
;

// Rule SpinEquate
ruleSpinEquate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='equ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSpinEquateAccess().getEquKeyword_0());
    }
(
(
		lv_ename_1_0=RULE_ID
		{
			newLeafNode(lv_ename_1_0, grammarAccess.getSpinEquateAccess().getEnameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpinEquateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ename",
        		lv_ename_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSpinEquateAccess().getValueSPINDOUBLEParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpinEquateRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSpinInt
entryRuleSpinInt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpinIntRule()); }
	 iv_ruleSpinInt=ruleSpinInt 
	 { $current=$iv_ruleSpinInt.current; } 
	 EOF 
;

// Rule SpinInt
ruleSpinInt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='int' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSpinIntAccess().getIntKeyword_0());
    }
(
(
		lv_ename_1_0=RULE_ID
		{
			newLeafNode(lv_ename_1_0, grammarAccess.getSpinIntAccess().getEnameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpinIntRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ename",
        		lv_ename_1_0, 
        		"ID");
	    }

)
)(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getSpinIntAccess().getValueINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpinIntRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleMem
entryRuleMem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemRule()); }
	 iv_ruleMem=ruleMem 
	 { $current=$iv_ruleMem.current; } 
	 EOF 
;

// Rule Mem
ruleMem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mem' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMemAccess().getMemKeyword_0());
    }
(
(
		lv_buffer_1_0=RULE_ID
		{
			newLeafNode(lv_buffer_1_0, grammarAccess.getMemAccess().getBufferIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"buffer",
        		lv_buffer_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMemAccess().getLengthSPINREGISTERParserRuleCall_2_0()); 
	    }
		lv_length_2_0=ruleSPINREGISTER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemRule());
	        }
       		set(
       			$current, 
       			"length",
        		lv_length_2_0, 
        		"SPINREGISTER");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOffset
entryRuleOffset returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOffsetRule()); }
	 iv_ruleOffset=ruleOffset 
	 { $current=$iv_ruleOffset.current; } 
	 EOF 
;

// Rule Offset
ruleOffset returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='offset' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOffsetAccess().getOffsetKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getOffsetAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOffsetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_length_2_0=RULE_INT
		{
			newLeafNode(lv_length_2_0, grammarAccess.getOffsetAccess().getLengthINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOffsetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"length",
        		lv_length_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleSpinBool
entryRuleSpinBool returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpinBoolRule()); }
	 iv_ruleSpinBool=ruleSpinBool 
	 { $current=$iv_ruleSpinBool.current; } 
	 EOF 
;

// Rule SpinBool
ruleSpinBool returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='bool' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSpinBoolAccess().getBoolKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSpinBoolAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpinBoolRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSpinBoolAccess().getValueBOOLEANParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleBOOLEAN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpinBoolRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"BOOLEAN");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleControl
entryRuleControl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getControlRule()); }
	 iv_ruleControl=ruleControl 
	 { $current=$iv_ruleControl.current; } 
	 EOF 
;

// Rule Control
ruleControl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getControlAccess().getSpinSliderLabelParserRuleCall_0()); 
    }
    this_SpinSliderLabel_0=ruleSpinSliderLabel
    { 
        $current = $this_SpinSliderLabel_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getControlAccess().getSpinCheckBoxParserRuleCall_1()); 
    }
    this_SpinCheckBox_1=ruleSpinCheckBox
    { 
        $current = $this_SpinCheckBox_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSpinSliderLabel
entryRuleSpinSliderLabel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpinSliderLabelRule()); }
	 iv_ruleSpinSliderLabel=ruleSpinSliderLabel 
	 { $current=$iv_ruleSpinSliderLabel.current; } 
	 EOF 
;

// Rule SpinSliderLabel
ruleSpinSliderLabel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@sliderLabel' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSpinSliderLabelAccess().getSliderLabelKeyword_0());
    }
(
(
		lv_ename_1_0=RULE_ID
		{
			newLeafNode(lv_ename_1_0, grammarAccess.getSpinSliderLabelAccess().getEnameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpinSliderLabelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ename",
        		lv_ename_1_0, 
        		"ID");
	    }

)
)(
(
		lv_controlName_2_0=RULE_ID
		{
			newLeafNode(lv_controlName_2_0, grammarAccess.getSpinSliderLabelAccess().getControlNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpinSliderLabelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"controlName",
        		lv_controlName_2_0, 
        		"ID");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSpinSliderLabelAccess().getMinValSPINDOUBLEParserRuleCall_3_0_0()); 
	    }
		lv_minVal_3_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpinSliderLabelRule());
	        }
       		set(
       			$current, 
       			"minVal",
        		lv_minVal_3_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSpinSliderLabelAccess().getMaxValSPINDOUBLEParserRuleCall_3_1_0()); 
	    }
		lv_maxVal_4_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpinSliderLabelRule());
	        }
       		set(
       			$current, 
       			"maxVal",
        		lv_maxVal_4_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSpinSliderLabelAccess().getMultiplierSPINDOUBLEParserRuleCall_3_2_0()); 
	    }
		lv_multiplier_5_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpinSliderLabelRule());
	        }
       		set(
       			$current, 
       			"multiplier",
        		lv_multiplier_5_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_precision_6_0=RULE_INT
		{
			newLeafNode(lv_precision_6_0, grammarAccess.getSpinSliderLabelAccess().getPrecisionINTTerminalRuleCall_3_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpinSliderLabelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"precision",
        		lv_precision_6_0, 
        		"INT");
	    }

)
)(
(
		lv_option_7_0=RULE_ID
		{
			newLeafNode(lv_option_7_0, grammarAccess.getSpinSliderLabelAccess().getOptionIDTerminalRuleCall_3_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpinSliderLabelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"option",
        		lv_option_7_0, 
        		"ID");
	    }

)
)?)?)
;





// Entry rule entryRuleSpinCheckBox
entryRuleSpinCheckBox returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpinCheckBoxRule()); }
	 iv_ruleSpinCheckBox=ruleSpinCheckBox 
	 { $current=$iv_ruleSpinCheckBox.current; } 
	 EOF 
;

// Rule SpinCheckBox
ruleSpinCheckBox returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@checkbox' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSpinCheckBoxAccess().getCheckboxKeyword_0());
    }
(
(
		lv_ename_1_0=RULE_ID
		{
			newLeafNode(lv_ename_1_0, grammarAccess.getSpinCheckBoxAccess().getEnameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpinCheckBoxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ename",
        		lv_ename_1_0, 
        		"ID");
	    }

)
)(
(
		lv_controlName_2_0=RULE_ID
		{
			newLeafNode(lv_controlName_2_0, grammarAccess.getSpinCheckBoxAccess().getControlNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpinCheckBoxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"controlName",
        		lv_controlName_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleComment
entryRuleComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentRule()); }
	 iv_ruleComment=ruleComment 
	 { $current=$iv_ruleComment.current; } 
	 EOF 
;

// Rule Comment
ruleComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_remark_0_0=RULE_SC_COMMENT
		{
			newLeafNode(lv_remark_0_0, grammarAccess.getCommentAccess().getRemarkSC_COMMENTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"remark",
        		lv_remark_0_0, 
        		"SC_COMMENT");
	    }

)
)
;





// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	 iv_ruleLabel=ruleLabel 
	 { $current=$iv_ruleLabel.current; } 
	 EOF 
;

// Rule Label
ruleLabel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLabelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLabelAccess().getColonKeyword_1());
    }
)
;





// Entry rule entryRuleMacro
entryRuleMacro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacroRule()); }
	 iv_ruleMacro=ruleMacro 
	 { $current=$iv_ruleMacro.current; } 
	 EOF 
;

// Rule Macro
ruleMacro returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMacroAccess().getIsPinConnectedParserRuleCall_0()); 
    }
    this_IsPinConnected_0=ruleIsPinConnected
    { 
        $current = $this_IsPinConnected_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMacroAccess().getIsTrueParserRuleCall_1()); 
    }
    this_IsTrue_1=ruleIsTrue
    { 
        $current = $this_IsTrue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMacroAccess().getIsElseParserRuleCall_2()); 
    }
    this_IsElse_2=ruleIsElse
    { 
        $current = $this_IsElse_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMacroAccess().getIsEndifParserRuleCall_3()); 
    }
    this_IsEndif_3=ruleIsEndif
    { 
        $current = $this_IsEndif_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMacroAccess().getGetInputDefaultParserRuleCall_4()); 
    }
    this_GetInputDefault_4=ruleGetInputDefault
    { 
        $current = $this_GetInputDefault_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMacroAccess().getGetDelayScaleControlParserRuleCall_5()); 
    }
    this_GetDelayScaleControl_5=ruleGetDelayScaleControl
    { 
        $current = $this_GetDelayScaleControl_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMacroAccess().getSetOutputPinParserRuleCall_6()); 
    }
    this_SetOutputPin_6=ruleSetOutputPin
    { 
        $current = $this_SetOutputPin_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMacroAccess().getGetBaseAddressParserRuleCall_7()); 
    }
    this_GetBaseAddress_7=ruleGetBaseAddress
    { 
        $current = $this_GetBaseAddress_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMacroAccess().getGetSamplesFromRatioParserRuleCall_8()); 
    }
    this_GetSamplesFromRatio_8=ruleGetSamplesFromRatio
    { 
        $current = $this_GetSamplesFromRatio_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIsPinConnected
entryRuleIsPinConnected returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsPinConnectedRule()); }
	 iv_ruleIsPinConnected=ruleIsPinConnected 
	 { $current=$iv_ruleIsPinConnected.current; } 
	 EOF 
;

// Rule IsPinConnected
ruleIsPinConnected returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@isPinConnected' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIsPinConnectedAccess().getIsPinConnectedKeyword_0());
    }
(
(
		lv_arg1_1_0=RULE_ID
		{
			newLeafNode(lv_arg1_1_0, grammarAccess.getIsPinConnectedAccess().getArg1IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsPinConnectedRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleIsTrue
entryRuleIsTrue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsTrueRule()); }
	 iv_ruleIsTrue=ruleIsTrue 
	 { $current=$iv_ruleIsTrue.current; } 
	 EOF 
;

// Rule IsTrue
ruleIsTrue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@isTrue' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIsTrueAccess().getIsTrueKeyword_0());
    }
(
(
		lv_variable_1_0=RULE_ID
		{
			newLeafNode(lv_variable_1_0, grammarAccess.getIsTrueAccess().getVariableIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsTrueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleIsElse
entryRuleIsElse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsElseRule()); }
	 iv_ruleIsElse=ruleIsElse 
	 { $current=$iv_ruleIsElse.current; } 
	 EOF 
;

// Rule IsElse
ruleIsElse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIsElseAccess().getIsElseAction_0(),
            $current);
    }
)	otherlv_1='@else' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIsElseAccess().getElseKeyword_1());
    }
)
;





// Entry rule entryRuleIsEndif
entryRuleIsEndif returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsEndifRule()); }
	 iv_ruleIsEndif=ruleIsEndif 
	 { $current=$iv_ruleIsEndif.current; } 
	 EOF 
;

// Rule IsEndif
ruleIsEndif returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIsEndifAccess().getIsEndifAction_0(),
            $current);
    }
)	otherlv_1='@endif' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIsEndifAccess().getEndifKeyword_1());
    }
)
;





// Entry rule entryRuleGetInputDefault
entryRuleGetInputDefault returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetInputDefaultRule()); }
	 iv_ruleGetInputDefault=ruleGetInputDefault 
	 { $current=$iv_ruleGetInputDefault.current; } 
	 EOF 
;

// Rule GetInputDefault
ruleGetInputDefault returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@getInputDefault' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGetInputDefaultAccess().getGetInputDefaultKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getGetInputDefaultAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetInputDefaultRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_variable_2_0=RULE_ID
		{
			newLeafNode(lv_variable_2_0, grammarAccess.getGetInputDefaultAccess().getVariableIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetInputDefaultRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_2_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGetInputDefaultAccess().getScaleSPINDOUBLEParserRuleCall_3_0()); 
	    }
		lv_scale_3_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetInputDefaultRule());
	        }
       		set(
       			$current, 
       			"scale",
        		lv_scale_3_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGetInputDefaultAccess().getDefaultValSPINDOUBLEParserRuleCall_4_0()); 
	    }
		lv_defaultVal_4_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetInputDefaultRule());
	        }
       		set(
       			$current, 
       			"defaultVal",
        		lv_defaultVal_4_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGetDelayScaleControl
entryRuleGetDelayScaleControl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetDelayScaleControlRule()); }
	 iv_ruleGetDelayScaleControl=ruleGetDelayScaleControl 
	 { $current=$iv_ruleGetDelayScaleControl.current; } 
	 EOF 
;

// Rule GetDelayScaleControl
ruleGetDelayScaleControl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@getDelayScaleControl' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGetDelayScaleControlAccess().getGetDelayScaleControlKeyword_0());
    }
(
(
		lv_ratio_1_0=RULE_ID
		{
			newLeafNode(lv_ratio_1_0, grammarAccess.getGetDelayScaleControlAccess().getRatioIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetDelayScaleControlRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ratio",
        		lv_ratio_1_0, 
        		"ID");
	    }

)
)(
(
		lv_length_2_0=RULE_ID
		{
			newLeafNode(lv_length_2_0, grammarAccess.getGetDelayScaleControlAccess().getLengthIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetDelayScaleControlRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"length",
        		lv_length_2_0, 
        		"ID");
	    }

)
)(
(
		lv_offset_3_0=RULE_ID
		{
			newLeafNode(lv_offset_3_0, grammarAccess.getGetDelayScaleControlAccess().getOffsetIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetDelayScaleControlRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"offset",
        		lv_offset_3_0, 
        		"ID");
	    }

)
)(
(
		lv_control_4_0=RULE_ID
		{
			newLeafNode(lv_control_4_0, grammarAccess.getGetDelayScaleControlAccess().getControlIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetDelayScaleControlRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"control",
        		lv_control_4_0, 
        		"ID");
	    }

)
)?)
;





// Entry rule entryRuleGetSamplesFromRatio
entryRuleGetSamplesFromRatio returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetSamplesFromRatioRule()); }
	 iv_ruleGetSamplesFromRatio=ruleGetSamplesFromRatio 
	 { $current=$iv_ruleGetSamplesFromRatio.current; } 
	 EOF 
;

// Rule GetSamplesFromRatio
ruleGetSamplesFromRatio returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@getSamplesFromRatio' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGetSamplesFromRatioAccess().getGetSamplesFromRatioKeyword_0());
    }
(
(
		lv_variable_1_0=RULE_ID
		{
			newLeafNode(lv_variable_1_0, grammarAccess.getGetSamplesFromRatioAccess().getVariableIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetSamplesFromRatioRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGetSamplesFromRatioAccess().getRatioSPINDOUBLEParserRuleCall_2_0()); 
	    }
		lv_ratio_2_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetSamplesFromRatioRule());
	        }
       		set(
       			$current, 
       			"ratio",
        		lv_ratio_2_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGetSamplesFromRatioAccess().getLengthSPINDOUBLEParserRuleCall_3_0()); 
	    }
		lv_length_3_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetSamplesFromRatioRule());
	        }
       		set(
       			$current, 
       			"length",
        		lv_length_3_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGetBaseAddress
entryRuleGetBaseAddress returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetBaseAddressRule()); }
	 iv_ruleGetBaseAddress=ruleGetBaseAddress 
	 { $current=$iv_ruleGetBaseAddress.current; } 
	 EOF 
;

// Rule GetBaseAddress
ruleGetBaseAddress returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGetBaseAddressAccess().getGetBaseAddressAction_0(),
            $current);
    }
)	otherlv_1='@getBaseAddress' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGetBaseAddressAccess().getGetBaseAddressKeyword_1());
    }
)
;





// Entry rule entryRuleSetOutputPin
entryRuleSetOutputPin returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetOutputPinRule()); }
	 iv_ruleSetOutputPin=ruleSetOutputPin 
	 { $current=$iv_ruleSetOutputPin.current; } 
	 EOF 
;

// Rule SetOutputPin
ruleSetOutputPin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@setOutputPin' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSetOutputPinAccess().getSetOutputPinKeyword_0());
    }
(
(
		lv_pinName_1_0=RULE_ID
		{
			newLeafNode(lv_pinName_1_0, grammarAccess.getSetOutputPinAccess().getPinNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetOutputPinRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"pinName",
        		lv_pinName_1_0, 
        		"ID");
	    }

)
)(
(
		lv_varName_2_0=RULE_ID
		{
			newLeafNode(lv_varName_2_0, grammarAccess.getSetOutputPinAccess().getVarNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetOutputPinRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"varName",
        		lv_varName_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getInst_B15_S1_9ParserRuleCall_0()); 
    }
    this_Inst_B15_S1_9_0=ruleInst_B15_S1_9
    { 
        $current = $this_Inst_B15_S1_9_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getInst_B6_S1_14ParserRuleCall_1()); 
    }
    this_Inst_B6_S1_14_1=ruleInst_B6_S1_14
    { 
        $current = $this_Inst_B6_S1_14_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getInst_S1_14_S1_10ParserRuleCall_2()); 
    }
    this_Inst_S1_14_S1_10_2=ruleInst_S1_14_S1_10
    { 
        $current = $this_Inst_S1_14_S1_10_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getInst_B6ParserRuleCall_3()); 
    }
    this_Inst_B6_3=ruleInst_B6
    { 
        $current = $this_Inst_B6_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getInst_B24ParserRuleCall_4()); 
    }
    this_Inst_B24_4=ruleInst_B24
    { 
        $current = $this_Inst_B24_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getSkipParserRuleCall_5()); 
    }
    this_Skip_5=ruleSkip
    { 
        $current = $this_Skip_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getJamParserRuleCall_6()); 
    }
    this_Jam_6=ruleJam
    { 
        $current = $this_Jam_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getInst_X0ParserRuleCall_7()); 
    }
    this_Inst_X0_7=ruleInst_X0
    { 
        $current = $this_Inst_X0_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getLoadSinLFOParserRuleCall_8()); 
    }
    this_LoadSinLFO_8=ruleLoadSinLFO
    { 
        $current = $this_LoadSinLFO_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getLoadRampLFOParserRuleCall_9()); 
    }
    this_LoadRampLFO_9=ruleLoadRampLFO
    { 
        $current = $this_LoadRampLFO_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getChorusReadDelayParserRuleCall_10()); 
    }
    this_ChorusReadDelay_10=ruleChorusReadDelay
    { 
        $current = $this_ChorusReadDelay_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getChorusReadValueParserRuleCall_11()); 
    }
    this_ChorusReadValue_11=ruleChorusReadValue
    { 
        $current = $this_ChorusReadValue_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getChorusScaleOffsetParserRuleCall_12()); 
    }
    this_ChorusScaleOffset_12=ruleChorusScaleOffset
    { 
        $current = $this_ChorusScaleOffset_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getLogParserRuleCall_13()); 
    }
    this_Log_13=ruleLog
    { 
        $current = $this_Log_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getReadDelayPointerParserRuleCall_14()); 
    }
    this_ReadDelayPointer_14=ruleReadDelayPointer
    { 
        $current = $this_ReadDelayPointer_14.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInst_B6_S1_14
entryRuleInst_B6_S1_14 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInst_B6_S1_14Rule()); }
	 iv_ruleInst_B6_S1_14=ruleInst_B6_S1_14 
	 { $current=$iv_ruleInst_B6_S1_14.current; } 
	 EOF 
;

// Rule Inst_B6_S1_14
ruleInst_B6_S1_14 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInst_B6_S1_14Access().getReadRegisterParserRuleCall_0()); 
    }
    this_ReadRegister_0=ruleReadRegister
    { 
        $current = $this_ReadRegister_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInst_B6_S1_14Access().getWriteRegisterParserRuleCall_1()); 
    }
    this_WriteRegister_1=ruleWriteRegister
    { 
        $current = $this_WriteRegister_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInst_B6_S1_14Access().getReadRegisterFilterParserRuleCall_2()); 
    }
    this_ReadRegisterFilter_2=ruleReadRegisterFilter
    { 
        $current = $this_ReadRegisterFilter_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInst_B6_S1_14Access().getMaxxParserRuleCall_3()); 
    }
    this_Maxx_3=ruleMaxx
    { 
        $current = $this_Maxx_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInst_B6_S1_14Access().getWriteRegisterHighshelfParserRuleCall_4()); 
    }
    this_WriteRegisterHighshelf_4=ruleWriteRegisterHighshelf
    { 
        $current = $this_WriteRegisterHighshelf_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInst_B6_S1_14Access().getWriteRegisterLowshelfParserRuleCall_5()); 
    }
    this_WriteRegisterLowshelf_5=ruleWriteRegisterLowshelf
    { 
        $current = $this_WriteRegisterLowshelf_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInst_B15_S1_9
entryRuleInst_B15_S1_9 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInst_B15_S1_9Rule()); }
	 iv_ruleInst_B15_S1_9=ruleInst_B15_S1_9 
	 { $current=$iv_ruleInst_B15_S1_9.current; } 
	 EOF 
;

// Rule Inst_B15_S1_9
ruleInst_B15_S1_9 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInst_B15_S1_9Access().getReadDelayParserRuleCall_0()); 
    }
    this_ReadDelay_0=ruleReadDelay
    { 
        $current = $this_ReadDelay_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInst_B15_S1_9Access().getWriteDelayParserRuleCall_1()); 
    }
    this_WriteDelay_1=ruleWriteDelay
    { 
        $current = $this_WriteDelay_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInst_B15_S1_9Access().getWriteAllpassParserRuleCall_2()); 
    }
    this_WriteAllpass_2=ruleWriteAllpass
    { 
        $current = $this_WriteAllpass_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInst_B6
entryRuleInst_B6 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInst_B6Rule()); }
	 iv_ruleInst_B6=ruleInst_B6 
	 { $current=$iv_ruleInst_B6.current; } 
	 EOF 
;

// Rule Inst_B6
ruleInst_B6 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInst_B6Access().getMulxParserRuleCall_0()); 
    }
    this_Mulx_0=ruleMulx
    { 
        $current = $this_Mulx_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInst_B6Access().getLdaxParserRuleCall_1()); 
    }
    this_Ldax_1=ruleLdax
    { 
        $current = $this_Ldax_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInst_B24
entryRuleInst_B24 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInst_B24Rule()); }
	 iv_ruleInst_B24=ruleInst_B24 
	 { $current=$iv_ruleInst_B24.current; } 
	 EOF 
;

// Rule Inst_B24
ruleInst_B24 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInst_B24Access().getAndParserRuleCall_0()); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInst_B24Access().getOrParserRuleCall_1()); 
    }
    this_Or_1=ruleOr
    { 
        $current = $this_Or_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInst_B24Access().getXorParserRuleCall_2()); 
    }
    this_Xor_2=ruleXor
    { 
        $current = $this_Xor_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInst_X0
entryRuleInst_X0 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInst_X0Rule()); }
	 iv_ruleInst_X0=ruleInst_X0 
	 { $current=$iv_ruleInst_X0.current; } 
	 EOF 
;

// Rule Inst_X0
ruleInst_X0 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInst_X0Access().getClrParserRuleCall_0()); 
    }
    this_Clr_0=ruleClr
    { 
        $current = $this_Clr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInst_X0Access().getNotParserRuleCall_1()); 
    }
    this_Not_1=ruleNot
    { 
        $current = $this_Not_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInst_X0Access().getAbsaParserRuleCall_2()); 
    }
    this_Absa_2=ruleAbsa
    { 
        $current = $this_Absa_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInst_S1_14_S1_10
entryRuleInst_S1_14_S1_10 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInst_S1_14_S1_10Rule()); }
	 iv_ruleInst_S1_14_S1_10=ruleInst_S1_14_S1_10 
	 { $current=$iv_ruleInst_S1_14_S1_10.current; } 
	 EOF 
;

// Rule Inst_S1_14_S1_10
ruleInst_S1_14_S1_10 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInst_S1_14_S1_10Access().getExpParserRuleCall_0()); 
    }
    this_Exp_0=ruleExp
    { 
        $current = $this_Exp_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInst_S1_14_S1_10Access().getScaleOffsetParserRuleCall_1()); 
    }
    this_ScaleOffset_1=ruleScaleOffset
    { 
        $current = $this_ScaleOffset_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleReadRegister
entryRuleReadRegister returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReadRegisterRule()); }
	 iv_ruleReadRegister=ruleReadRegister 
	 { $current=$iv_ruleReadRegister.current; } 
	 EOF 
;

// Rule ReadRegister
ruleReadRegister returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rdax' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReadRegisterAccess().getRdaxKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReadRegisterAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleSPINREGISTER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReadRegisterRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"SPINREGISTER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReadRegisterAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReadRegisterAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
	    }
		lv_arg2_3_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReadRegisterRule());
	        }
       		set(
       			$current, 
       			"arg2",
        		lv_arg2_3_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWriteRegisterLowshelf
entryRuleWriteRegisterLowshelf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWriteRegisterLowshelfRule()); }
	 iv_ruleWriteRegisterLowshelf=ruleWriteRegisterLowshelf 
	 { $current=$iv_ruleWriteRegisterLowshelf.current; } 
	 EOF 
;

// Rule WriteRegisterLowshelf
ruleWriteRegisterLowshelf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='wrlx' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWriteRegisterLowshelfAccess().getWrlxKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWriteRegisterLowshelfAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleSPINREGISTER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWriteRegisterLowshelfRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"SPINREGISTER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWriteRegisterLowshelfAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWriteRegisterLowshelfAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
	    }
		lv_arg2_3_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWriteRegisterLowshelfRule());
	        }
       		set(
       			$current, 
       			"arg2",
        		lv_arg2_3_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWriteRegisterHighshelf
entryRuleWriteRegisterHighshelf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWriteRegisterHighshelfRule()); }
	 iv_ruleWriteRegisterHighshelf=ruleWriteRegisterHighshelf 
	 { $current=$iv_ruleWriteRegisterHighshelf.current; } 
	 EOF 
;

// Rule WriteRegisterHighshelf
ruleWriteRegisterHighshelf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='wrhx' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWriteRegisterHighshelfAccess().getWrhxKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWriteRegisterHighshelfAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleSPINREGISTER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWriteRegisterHighshelfRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"SPINREGISTER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWriteRegisterHighshelfAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWriteRegisterHighshelfAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
	    }
		lv_arg2_3_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWriteRegisterHighshelfRule());
	        }
       		set(
       			$current, 
       			"arg2",
        		lv_arg2_3_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWriteRegister
entryRuleWriteRegister returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWriteRegisterRule()); }
	 iv_ruleWriteRegister=ruleWriteRegister 
	 { $current=$iv_ruleWriteRegister.current; } 
	 EOF 
;

// Rule WriteRegister
ruleWriteRegister returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='wrax' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWriteRegisterAccess().getWraxKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWriteRegisterAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleSPINREGISTER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWriteRegisterRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"SPINREGISTER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWriteRegisterAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWriteRegisterAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
	    }
		lv_arg2_3_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWriteRegisterRule());
	        }
       		set(
       			$current, 
       			"arg2",
        		lv_arg2_3_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMaxx
entryRuleMaxx returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMaxxRule()); }
	 iv_ruleMaxx=ruleMaxx 
	 { $current=$iv_ruleMaxx.current; } 
	 EOF 
;

// Rule Maxx
ruleMaxx returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='maxx' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMaxxAccess().getMaxxKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMaxxAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleSPINREGISTER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMaxxRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"SPINREGISTER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMaxxAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMaxxAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
	    }
		lv_arg2_3_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMaxxRule());
	        }
       		set(
       			$current, 
       			"arg2",
        		lv_arg2_3_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleReadRegisterFilter
entryRuleReadRegisterFilter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReadRegisterFilterRule()); }
	 iv_ruleReadRegisterFilter=ruleReadRegisterFilter 
	 { $current=$iv_ruleReadRegisterFilter.current; } 
	 EOF 
;

// Rule ReadRegisterFilter
ruleReadRegisterFilter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rdfx' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReadRegisterFilterAccess().getRdfxKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReadRegisterFilterAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleSPINREGISTER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReadRegisterFilterRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"SPINREGISTER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReadRegisterFilterAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReadRegisterFilterAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
	    }
		lv_arg2_3_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReadRegisterFilterRule());
	        }
       		set(
       			$current, 
       			"arg2",
        		lv_arg2_3_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMulx
entryRuleMulx returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMulxRule()); }
	 iv_ruleMulx=ruleMulx 
	 { $current=$iv_ruleMulx.current; } 
	 EOF 
;

// Rule Mulx
ruleMulx returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mulx' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMulxAccess().getMulxKeyword_0());
    }
(
(
		lv_arg1_1_0=RULE_ID
		{
			newLeafNode(lv_arg1_1_0, grammarAccess.getMulxAccess().getArg1IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMulxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleLdax
entryRuleLdax returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLdaxRule()); }
	 iv_ruleLdax=ruleLdax 
	 { $current=$iv_ruleLdax.current; } 
	 EOF 
;

// Rule Ldax
ruleLdax returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ldax' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLdaxAccess().getLdaxKeyword_0());
    }
(
(
		lv_arg1_1_0=RULE_ID
		{
			newLeafNode(lv_arg1_1_0, grammarAccess.getLdaxAccess().getArg1IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLdaxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleExp
entryRuleExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpRule()); }
	 iv_ruleExp=ruleExp 
	 { $current=$iv_ruleExp.current; } 
	 EOF 
;

// Rule Exp
ruleExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='exp' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpAccess().getExpKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpAccess().getArg1SPINDOUBLEParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
	    }
		lv_arg2_3_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpRule());
	        }
       		set(
       			$current, 
       			"arg2",
        		lv_arg2_3_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLog
entryRuleLog returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogRule()); }
	 iv_ruleLog=ruleLog 
	 { $current=$iv_ruleLog.current; } 
	 EOF 
;

// Rule Log
ruleLog returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='log' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLogAccess().getLogKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogAccess().getArg1SPINDOUBLEParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLogAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
	    }
		lv_arg2_3_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogRule());
	        }
       		set(
       			$current, 
       			"arg2",
        		lv_arg2_3_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleScaleOffset
entryRuleScaleOffset returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScaleOffsetRule()); }
	 iv_ruleScaleOffset=ruleScaleOffset 
	 { $current=$iv_ruleScaleOffset.current; } 
	 EOF 
;

// Rule ScaleOffset
ruleScaleOffset returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sof' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScaleOffsetAccess().getSofKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScaleOffsetAccess().getArg1SPINDOUBLEParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScaleOffsetRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getScaleOffsetAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScaleOffsetAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
	    }
		lv_arg2_3_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScaleOffsetRule());
	        }
       		set(
       			$current, 
       			"arg2",
        		lv_arg2_3_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWriteDelay
entryRuleWriteDelay returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWriteDelayRule()); }
	 iv_ruleWriteDelay=ruleWriteDelay 
	 { $current=$iv_ruleWriteDelay.current; } 
	 EOF 
;

// Rule WriteDelay
ruleWriteDelay returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='wra' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWriteDelayAccess().getWraKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWriteDelayAccess().getArg1SPINMEMParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleSPINMEM		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWriteDelayRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"SPINMEM");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWriteDelayAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWriteDelayAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
	    }
		lv_arg2_3_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWriteDelayRule());
	        }
       		set(
       			$current, 
       			"arg2",
        		lv_arg2_3_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWriteAllpass
entryRuleWriteAllpass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWriteAllpassRule()); }
	 iv_ruleWriteAllpass=ruleWriteAllpass 
	 { $current=$iv_ruleWriteAllpass.current; } 
	 EOF 
;

// Rule WriteAllpass
ruleWriteAllpass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='wrap' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWriteAllpassAccess().getWrapKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWriteAllpassAccess().getArg1SPINMEMParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleSPINMEM		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWriteAllpassRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"SPINMEM");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWriteAllpassAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWriteAllpassAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
	    }
		lv_arg2_3_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWriteAllpassRule());
	        }
       		set(
       			$current, 
       			"arg2",
        		lv_arg2_3_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleReadDelay
entryRuleReadDelay returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReadDelayRule()); }
	 iv_ruleReadDelay=ruleReadDelay 
	 { $current=$iv_ruleReadDelay.current; } 
	 EOF 
;

// Rule ReadDelay
ruleReadDelay returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rda' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReadDelayAccess().getRdaKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReadDelayAccess().getArg1SPINMEMParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleSPINMEM		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReadDelayRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"SPINMEM");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReadDelayAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReadDelayAccess().getArg2SPINDOUBLEParserRuleCall_3_0()); 
	    }
		lv_arg2_3_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReadDelayRule());
	        }
       		set(
       			$current, 
       			"arg2",
        		lv_arg2_3_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLoadSinLFO
entryRuleLoadSinLFO returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoadSinLFORule()); }
	 iv_ruleLoadSinLFO=ruleLoadSinLFO 
	 { $current=$iv_ruleLoadSinLFO.current; } 
	 EOF 
;

// Rule LoadSinLFO
ruleLoadSinLFO returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='wlds' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoadSinLFOAccess().getWldsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadSinLFOAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleSPINREGISTER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadSinLFORule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"SPINREGISTER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLoadSinLFOAccess().getCommaKeyword_2());
    }
(
(
		lv_arg2_3_0=RULE_INT
		{
			newLeafNode(lv_arg2_3_0, grammarAccess.getLoadSinLFOAccess().getArg2INTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoadSinLFORule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"arg2",
        		lv_arg2_3_0, 
        		"INT");
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLoadSinLFOAccess().getCommaKeyword_4());
    }
(
(
		lv_arg3_5_0=RULE_INT
		{
			newLeafNode(lv_arg3_5_0, grammarAccess.getLoadSinLFOAccess().getArg3INTTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoadSinLFORule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"arg3",
        		lv_arg3_5_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleLoadRampLFO
entryRuleLoadRampLFO returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoadRampLFORule()); }
	 iv_ruleLoadRampLFO=ruleLoadRampLFO 
	 { $current=$iv_ruleLoadRampLFO.current; } 
	 EOF 
;

// Rule LoadRampLFO
ruleLoadRampLFO returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='wldr' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoadRampLFOAccess().getWldrKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadRampLFOAccess().getArg1SPINREGISTERParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleSPINREGISTER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadRampLFORule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"SPINREGISTER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLoadRampLFOAccess().getCommaKeyword_2());
    }
(
(
		lv_arg2_3_0=RULE_INT
		{
			newLeafNode(lv_arg2_3_0, grammarAccess.getLoadRampLFOAccess().getArg2INTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoadRampLFORule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"arg2",
        		lv_arg2_3_0, 
        		"INT");
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLoadRampLFOAccess().getCommaKeyword_4());
    }
(
(
		lv_arg3_5_0=RULE_INT
		{
			newLeafNode(lv_arg3_5_0, grammarAccess.getLoadRampLFOAccess().getArg3INTTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoadRampLFORule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"arg3",
        		lv_arg3_5_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleChorusReadDelay
entryRuleChorusReadDelay returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChorusReadDelayRule()); }
	 iv_ruleChorusReadDelay=ruleChorusReadDelay 
	 { $current=$iv_ruleChorusReadDelay.current; } 
	 EOF 
;

// Rule ChorusReadDelay
ruleChorusReadDelay returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='cho rda' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getChorusReadDelayAccess().getChoRdaKeyword_0());
    }
	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChorusReadDelayAccess().getCommaKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChorusReadDelayAccess().getArg1SPINREGISTERParserRuleCall_2_0()); 
	    }
		lv_arg1_2_0=ruleSPINREGISTER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChorusReadDelayRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_2_0, 
        		"SPINREGISTER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getChorusReadDelayAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChorusReadDelayAccess().getArg2SPINCHOREGFLAGSParserRuleCall_4_0()); 
	    }
		lv_arg2_4_0=ruleSPINCHOREGFLAGS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChorusReadDelayRule());
	        }
       		set(
       			$current, 
       			"arg2",
        		lv_arg2_4_0, 
        		"SPINCHOREGFLAGS");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getChorusReadDelayAccess().getCommaKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChorusReadDelayAccess().getArg3SPINMEMParserRuleCall_6_0()); 
	    }
		lv_arg3_6_0=ruleSPINMEM		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChorusReadDelayRule());
	        }
       		set(
       			$current, 
       			"arg3",
        		lv_arg3_6_0, 
        		"SPINMEM");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleChorusReadValue
entryRuleChorusReadValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChorusReadValueRule()); }
	 iv_ruleChorusReadValue=ruleChorusReadValue 
	 { $current=$iv_ruleChorusReadValue.current; } 
	 EOF 
;

// Rule ChorusReadValue
ruleChorusReadValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='cho rdal' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getChorusReadValueAccess().getChoRdalKeyword_0());
    }
	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChorusReadValueAccess().getCommaKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChorusReadValueAccess().getArg1SPINREGISTERParserRuleCall_2_0()); 
	    }
		lv_arg1_2_0=ruleSPINREGISTER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChorusReadValueRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_2_0, 
        		"SPINREGISTER");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleChorusScaleOffset
entryRuleChorusScaleOffset returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChorusScaleOffsetRule()); }
	 iv_ruleChorusScaleOffset=ruleChorusScaleOffset 
	 { $current=$iv_ruleChorusScaleOffset.current; } 
	 EOF 
;

// Rule ChorusScaleOffset
ruleChorusScaleOffset returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='cho sof' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getChorusScaleOffsetAccess().getChoSofKeyword_0());
    }
	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChorusScaleOffsetAccess().getCommaKeyword_1());
    }
(
(
		lv_arg1_2_0=RULE_ID
		{
			newLeafNode(lv_arg1_2_0, grammarAccess.getChorusScaleOffsetAccess().getArg1IDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChorusScaleOffsetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"arg1",
        		lv_arg1_2_0, 
        		"ID");
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getChorusScaleOffsetAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChorusScaleOffsetAccess().getArg2SPINCHOREGFLAGSParserRuleCall_4_0()); 
	    }
		lv_arg2_4_0=ruleSPINCHOREGFLAGS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChorusScaleOffsetRule());
	        }
       		set(
       			$current, 
       			"arg2",
        		lv_arg2_4_0, 
        		"SPINCHOREGFLAGS");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getChorusScaleOffsetAccess().getCommaKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChorusScaleOffsetAccess().getArg3SPINDOUBLEParserRuleCall_6_0()); 
	    }
		lv_arg3_6_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChorusScaleOffsetRule());
	        }
       		set(
       			$current, 
       			"arg3",
        		lv_arg3_6_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleReadDelayPointer
entryRuleReadDelayPointer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReadDelayPointerRule()); }
	 iv_ruleReadDelayPointer=ruleReadDelayPointer 
	 { $current=$iv_ruleReadDelayPointer.current; } 
	 EOF 
;

// Rule ReadDelayPointer
ruleReadDelayPointer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rmpa' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReadDelayPointerAccess().getRmpaKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReadDelayPointerAccess().getArg1SPINDOUBLEParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleSPINDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReadDelayPointerRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"SPINDOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;

// Rule And
ruleAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='and' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAndAccess().getAndKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getArg1BINARY24ParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleBINARY24		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"BINARY24");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;

// Rule Or
ruleOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='or' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOrAccess().getOrKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getArg1BINARY24ParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleBINARY24		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"BINARY24");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXor
entryRuleXor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXorRule()); }
	 iv_ruleXor=ruleXor 
	 { $current=$iv_ruleXor.current; } 
	 EOF 
;

// Rule Xor
ruleXor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='xor' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXorAccess().getXorKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXorAccess().getArg1BINARY24ParserRuleCall_1_0()); 
	    }
		lv_arg1_1_0=ruleBINARY24		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXorRule());
	        }
       		set(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"BINARY24");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJam
entryRuleJam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJamRule()); }
	 iv_ruleJam=ruleJam 
	 { $current=$iv_ruleJam.current; } 
	 EOF 
;

// Rule Jam
ruleJam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='jam' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJamAccess().getJamKeyword_0());
    }
(
(
		lv_arg1_1_0=RULE_ID
		{
			newLeafNode(lv_arg1_1_0, grammarAccess.getJamAccess().getArg1IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"arg1",
        		lv_arg1_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleClr
entryRuleClr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClrRule()); }
	 iv_ruleClr=ruleClr 
	 { $current=$iv_ruleClr.current; } 
	 EOF 
;

// Rule Clr
ruleClr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getClrAccess().getClrAction_0(),
            $current);
    }
)	otherlv_1='clr' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClrAccess().getClrKeyword_1());
    }
)
;





// Entry rule entryRuleNot
entryRuleNot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotRule()); }
	 iv_ruleNot=ruleNot 
	 { $current=$iv_ruleNot.current; } 
	 EOF 
;

// Rule Not
ruleNot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNotAccess().getNotAction_0(),
            $current);
    }
)	otherlv_1='not' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNotAccess().getNotKeyword_1());
    }
)
;





// Entry rule entryRuleAbsa
entryRuleAbsa returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbsaRule()); }
	 iv_ruleAbsa=ruleAbsa 
	 { $current=$iv_ruleAbsa.current; } 
	 EOF 
;

// Rule Absa
ruleAbsa returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAbsaAccess().getAbsaAction_0(),
            $current);
    }
)	otherlv_1='absa' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAbsaAccess().getAbsaKeyword_1());
    }
)
;





// Entry rule entryRuleSkip
entryRuleSkip returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSkipRule()); }
	 iv_ruleSkip=ruleSkip 
	 { $current=$iv_ruleSkip.current; } 
	 EOF 
;

// Rule Skip
ruleSkip returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='skp' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSkipAccess().getSkpKeyword_0());
    }
(
(
		lv_flags_1_0=RULE_ID
		{
			newLeafNode(lv_flags_1_0, grammarAccess.getSkipAccess().getFlagsIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSkipRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"flags",
        		lv_flags_1_0, 
        		"ID");
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSkipAccess().getCommaKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSkipRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getSkipAccess().getLabelLabelCrossReference_3_0()); 
	}

)
))
;





// Entry rule entryRuleSPINDOUBLE
entryRuleSPINDOUBLE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSPINDOUBLERule()); } 
	 iv_ruleSPINDOUBLE=ruleSPINDOUBLE 
	 { $current=$iv_ruleSPINDOUBLE.current.getText(); }  
	 EOF 
;

// Rule SPINDOUBLE
ruleSPINDOUBLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSPINDOUBLEAccess().getHyphenMinusKeyword_0()); 
    }
)?(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getSPINDOUBLEAccess().getIDTerminalRuleCall_1_0()); 
    }

    |(    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getSPINDOUBLEAccess().getINTTerminalRuleCall_1_1_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSPINDOUBLEAccess().getFullStopKeyword_1_1_1_0()); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getSPINDOUBLEAccess().getINTTerminalRuleCall_1_1_1_1()); 
    }
)?)))
    ;





// Entry rule entryRuleSPINREGISTER
entryRuleSPINREGISTER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSPINREGISTERRule()); } 
	 iv_ruleSPINREGISTER=ruleSPINREGISTER 
	 { $current=$iv_ruleSPINREGISTER.current.getText(); }  
	 EOF 
;

// Rule SPINREGISTER
ruleSPINREGISTER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getSPINREGISTERAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getSPINREGISTERAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleSPINCHOREGFLAGS
entryRuleSPINCHOREGFLAGS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSPINCHOREGFLAGSRule()); } 
	 iv_ruleSPINCHOREGFLAGS=ruleSPINCHOREGFLAGS 
	 { $current=$iv_ruleSPINCHOREGFLAGS.current.getText(); }  
	 EOF 
;

// Rule SPINCHOREGFLAGS
ruleSPINCHOREGFLAGS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getSPINCHOREGFLAGSAccess().getINTTerminalRuleCall_0()); 
    }

    |(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getSPINCHOREGFLAGSAccess().getIDTerminalRuleCall_1_0()); 
    }
(
	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSPINCHOREGFLAGSAccess().getVerticalLineKeyword_1_1_0()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getSPINCHOREGFLAGSAccess().getIDTerminalRuleCall_1_1_1()); 
    }
)*)?)
    ;





// Entry rule entryRuleSPINMEM
entryRuleSPINMEM returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSPINMEMRule()); }
	 iv_ruleSPINMEM=ruleSPINMEM 
	 { $current=$iv_ruleSPINMEM.current; } 
	 EOF 
;

// Rule SPINMEM
ruleSPINMEM returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSPINMEMAccess().getBufferSPINBUFParserRuleCall_0_0()); 
	    }
		lv_buffer_0_0=ruleSPINBUF		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSPINMEMRule());
	        }
       		set(
       			$current, 
       			"buffer",
        		lv_buffer_0_0, 
        		"SPINBUF");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getSPINMEMAccess().getValueINTTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSPINMEMRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSPINMEMRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getSPINMEMAccess().getOffsetOffsetCrossReference_1_1_0()); 
	}

)
))?)
;





// Entry rule entryRuleSPINBUF
entryRuleSPINBUF returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSPINBUFRule()); } 
	 iv_ruleSPINBUF=ruleSPINBUF 
	 { $current=$iv_ruleSPINBUF.current.getText(); }  
	 EOF 
;

// Rule SPINBUF
ruleSPINBUF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getSPINBUFAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSPINBUFAccess().getNumberSignKeyword_1_0()); 
    }

    |
	kw='^' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSPINBUFAccess().getCircumflexAccentKeyword_1_1()); 
    }
)?(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSPINBUFAccess().getPlusSignKeyword_2_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSPINBUFAccess().getHyphenMinusKeyword_2_1()); 
    }
)?)
    ;





// Entry rule entryRuleBINARY24
entryRuleBINARY24 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBINARY24Rule()); } 
	 iv_ruleBINARY24=ruleBINARY24 
	 { $current=$iv_ruleBINARY24.current.getText(); }  
	 EOF 
;

// Rule BINARY24
ruleBINARY24 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBINARY24Access().getPercentSignKeyword_0_0_0()); 
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getBINARY24Access().getINTTerminalRuleCall_0_0_1()); 
    }
)(    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getBINARY24Access().getIDTerminalRuleCall_0_1()); 
    }
)*)
    |(
	kw='$' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBINARY24Access().getDollarSignKeyword_1_0()); 
    }
(    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getBINARY24Access().getINTTerminalRuleCall_1_1()); 
    }
)*(    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getBINARY24Access().getIDTerminalRuleCall_1_2()); 
    }
)*))
    ;





// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBOOLEANRule()); } 
	 iv_ruleBOOLEAN=ruleBOOLEAN 
	 { $current=$iv_ruleBOOLEAN.current.getText(); }  
	 EOF 
;

// Rule BOOLEAN
ruleBOOLEAN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLEANAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLEANAccess().getFalseKeyword_1()); 
    }
)
    ;





RULE_SC_COMMENT : ';' ~(('\n'|'\r'))* '\r'? '\n';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


