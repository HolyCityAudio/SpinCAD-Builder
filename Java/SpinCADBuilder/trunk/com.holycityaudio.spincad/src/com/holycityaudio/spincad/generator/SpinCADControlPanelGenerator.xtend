/*
 * generated by Xtext
 */
package com.holycityaudio.spincad.generator

//import com.google.inject.Inject

import com.holycityaudio.spincad.spinCAD.Program
import com.holycityaudio.spincad.spinCAD.SpinElementimport com.holycityaudio.spincad.spinCAD.Equate
import com.holycityaudio.spincad.spinCAD.Bool

class SpinCADControlPanelGenerator {
	
	//---------------------------------------------------------------------------------
	// Control Panel code generation
	
	def genControlPanelCode(String blockName, Program pr) { 

	'''
/* SpinCAD Designer - DSP Development Tool for the Spin FV-1 
 * «blockName»ControlPanel.java
 * Copyright (C)2013 - Gary Worsham 
 * Based on ElmGen by Andrew Kilpatrick 
 * 
 *   This program is free software: you can redistribute it and/or modify 
 *   it under the terms of the GNU General Public License as published by 
 *   the Free Software Foundation, either version 3 of the License, or 
 *   (at your option) any later version. 
 * 
 *   This program is distributed in the hope that it will be useful, 
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of 
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *   GNU General Public License for more details. 
 * 
 *   You should have received a copy of the GNU General Public License 
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>. 
 *     
 */ 
		package com.holycityaudio.SpinCAD.ControlPanel;
		import javax.swing.JFrame;
		import javax.swing.SwingUtilities;
		import javax.swing.event.ChangeEvent;
		import javax.swing.event.ChangeListener;
		import java.awt.event.ItemEvent;
		import javax.swing.BoxLayout;
		import javax.swing.JSlider;
		import javax.swing.JLabel;
		import javax.swing.JCheckBox;
		
		import com.holycityaudio.SpinCAD.CADBlocks.«blockName+"CADBlock"»;

		public class «blockName+"ControlPanel"» {
		private JFrame frame;

		private «blockName+"CADBlock"» gCB;
		// declare the controls
			«FOR SpinElement e : pr.elements»
				«switch e {
					Equate: { declareEquate(e) }
					Bool: { declareBool(e) }
				}»
			«ENDFOR»

		public «blockName+"ControlPanel"»(«blockName+"CADBlock"» genericCADBlock) {
		
		gCB = genericCADBlock;

		SwingUtilities.invokeLater(new Runnable() {
			public void run() {

				frame = new JFrame();
				frame.setTitle("«pr.name»");
				frame.setLayout(new BoxLayout(frame.getContentPane(), BoxLayout.Y_AXIS));
			«FOR SpinElement e : pr.elements»
				«switch e {
					Equate: { sortEquateControl(blockName, e)}
					Bool: { sortBoolControl(blockName, e)}
				}»
			«ENDFOR»

				frame.setVisible(true);		
				frame.pack();
				frame.setResizable(false);
				frame.setLocation(gCB.getX() + 100, gCB.getY() + 100);
			}
		});
		}

		// add change listener for Sliders 
		class «blockName»SliderListener implements ChangeListener { 
		public void stateChanged(ChangeEvent ce) {
			«FOR SpinElement e : pr.elements»
				«switch e {
					Equate: { genControlListener(e)}
				}»
			«ENDFOR»
			}
		}
		// add item listener for Bool (CheckbBox) 
		class «blockName»ItemListener implements java.awt.event.ItemListener { 
		public void stateChanged(ChangeEvent ce) {
			«FOR SpinElement e : pr.elements»
				«switch e {
					Bool: { genControlListenerBool(e)}
				}»
			«ENDFOR»
			}
		@Override
		public void itemStateChanged(ItemEvent arg0) {
		// TODO Auto-generated method stub
			
		}
	}

		«FOR SpinElement e : pr.elements»
			«switch e {
				Equate: { genLabelUpdater(e)}
			}»
		«ENDFOR»
	}
	'''
	}
	
def declareEquate(Equate e) {
	'''
	«IF e.controlType == "SliderLabel"»
		JSlider «e.ename»Slider;
		JLabel  «e.ename»Label;	
	«ENDIF»	'''
}

def declareBool(Bool e) {
	'''
	«IF e.controlType == 'CheckBox'»
		JCheckBox «e.ename»CheckBox;		
	«ENDIF»	'''
}

def sortEquateControl(String blockName, Equate e) {
	'''
	«IF e.controlType == "SliderLabel"»
		«e.ename»Slider = new JSlider(JSlider.HORIZONTAL, (int)(«e.minVal» * «e.multiplier»),(int) («e.maxVal» * «e.multiplier»), (int) (gCB.get«e.ename»() * «e.multiplier»));
		«e.ename»Slider.addChangeListener(new «blockName»SliderListener());
		«e.ename»Label = new JLabel();
		update«e.ename»Label();
		frame.getContentPane().add(«e.ename»Label);
		frame.getContentPane().add(«e.ename»Slider);		
	«ENDIF»
'''
}

def sortBoolControl(String blockName, Bool e) {
	'''
	«IF e.controlType == "CheckBox"»
		«e.ename»CheckBox = new JCheckBox();
		«e.ename»CheckBox.setText("«e.controlName»");
		«e.ename»CheckBox.addItemListener(new «blockName»ItemListener());
		frame.getContentPane().add(«e.ename»CheckBox);		
	«ENDIF»	'''
}

def genControlListener(Equate e) {
	'''
	«IF e.controlType == "SliderLabel"»
		if(ce.getSource() == «e.ename»Slider) {
			gCB.set«e.ename»((double) («e.ename»Slider.getValue()/«e.multiplier»));
			update«e.ename»Label();
		}
	«ENDIF»
'''
}
def genControlListenerBool(Bool e) {
	'''
	«IF e.controlType == "CheckBox"»
		if(ce.getSource() == «e.ename»CheckBox) {
			gCB.set«e.ename»((boolean) («e.ename»CheckBox.isSelected()));
		}
	«ENDIF»	'''


}
def genLabelUpdater(Equate e) {
	'''
	«IF e.controlType == "SliderLabel"»
		private void update«e.ename»Label() {
		«IF e.option != null»
			«IF e.option == "lengthToTime"»
				«e.ename»Label.setText("«e.controlName» " + String.format("%4.«e.precision»f", (1000 * gCB.get«e.ename»())/gCB.getSamplerate()));		
			«ENDIF»
		«ELSE»
				«e.ename»Label.setText("«e.controlName» " + String.format("%4.«e.precision»f", gCB.get«e.ename»()));		
		«ENDIF»
		}
	«ENDIF»
		
	'''
}

// -- think all these below here should be deprecated/tossed out

def genCheckBox(Equate e) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub genCheckBox")
	}

def declareCheckBox(Equate e) {
				'''
				JCheckBox «e.ename»CheckBox;
				'''	
			}

def genSlider(String blockName, String sl) { '''
				«sl»Slider = new JSlider(JSlider.HORIZONTAL, 1, 100, (int) (100 * spbCB.get«sl»()));
				
				«blockName»SliderListener bSL = new «blockName»SliderListener();

				«sl»Slider.addChangeListener(bSL);

				frame.getContentPane().add(«sl»Slider);'''
	}

def declareSlider(Program pr, String sl) { '''
				JSlider «sl»Slider;
				'''
	}

def genControlLabel(Equate e) { '''
				«e.ename»Label = new JLabel();
				frame.getContentPane().add(«e.ename»Label);
				'''
	}

def declareControlLabel(Equate e) { '''
				JLabel «e.ename»Label;
				'''
	}

}
